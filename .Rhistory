filter(!is.na(cluster_4), !is.na(group))
# Define the channel names for delta (frontal ROI)
frontal_channels <- c('22','105','11','40','75','39','49','82','48','19','112','25','94','93','83','92','95','96','21','50','10','59','26')
# Filter rows with the specified channel names for frontal ROI
table_power_frontal <- table_power_5 %>%
filter(channel %in% frontal_channels)
# Define the channel names for beta (central ROI)
central_channels <- c('85','65','90','66','1','68','3','67','2','70','74','76','81','34','37','42','86','43','87','44','88','45','89','46','77','5','78','6','7','79','8','80','71','35','72','36','73')
# Filter rows with the specified channel names for central ROI
table_power_central <- table_power_5 %>%
filter(channel %in% central_channels)
# Frontal ROI: summarize delta power per participant
df_corr_frontal <- table_power_frontal %>%
group_by(participant_id, cluster_4, group, group_combined, age, sex, years_of_education,
facit_f_FS, hads_a_total_score, hads_d_total_score, psqi_total_score, moca,
pvt_reaction_time, nback_miss_1, nback_false_alarm_1, nback_miss_2, nback_false_alarm_2,
tmt_a_time, tmt_b_time, tmt_diff, number_epochs) %>%
summarise(mean_delta_power = mean(rel_delta, na.rm = TRUE),
mean_beta_power = mean(rel_beta, na.rm = TRUE),
mean_theta_power = mean(rel_theta, na.rm = TRUE),
mean_alpha_power = mean(rel_alpha, na.rm = TRUE),
mean_aperiodic_exponent = mean(aperiodic_exponent, na.rm = TRUE),
.groups = "drop")
# Central ROI: summarize beta power per participant
df_corr_central <- table_power_central %>%
group_by(participant_id, cluster_4, group, group_combined, age, sex, years_of_education,
facit_f_FS, hads_a_total_score, hads_d_total_score, psqi_total_score, moca,
pvt_reaction_time, nback_miss_1, nback_false_alarm_1, nback_miss_2, nback_false_alarm_2,
tmt_a_time, tmt_b_time, tmt_diff, number_epochs) %>%
summarise(mean_delta_power = mean(rel_delta, na.rm = TRUE),
mean_beta_power = mean(rel_beta, na.rm = TRUE),
mean_theta_power = mean(rel_theta, na.rm = TRUE),
mean_alpha_power = mean(rel_alpha, na.rm = TRUE),
mean_aperiodic_exponent = mean(aperiodic_exponent, na.rm = TRUE),
.groups = "drop")
# Levene's Test for delta power across 4 groups
leveneTest(mean_delta_power ~ group_combined, data = df_corr_frontal)
# Levene's Test for beta power across 4 groups
leveneTest(mean_beta_power ~ group_combined, data = df_corr_central)
# Group-wise subsets for plotting and stats
shapiro_groups <- df_corr_frontal %>%
group_by(group_combined)
# Sex distribution
sex_distribution <- df_corr_frontal %>%
group_by(group_combined, sex) %>%
count()
# Age
age_hist <- df_corr_frontal %>%
ggplot(aes(age)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~group_combined, scales = 'free') +
theme_classic()
age_summary <- df_corr_frontal %>%
group_by(group_combined) %>%
summarise(mean_age = mean(age), sd_age = sd(age))
kruskal.test(age ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% wilcox_effsize(age ~ group_combined)
# Education
education_hist <- df_corr_frontal %>%
ggplot(aes(years_of_education)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~group_combined, scales = 'free') +
theme_classic()
kruskal.test(years_of_education ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% wilcox_effsize(years_of_education ~ group_combined)
# FACIT
facit_hist <- df_corr_frontal %>%
ggplot(aes(facit_f_FS)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~group_combined, scales = 'free') +
theme_classic()
kruskal.test(facit_f_FS ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% wilcox_effsize(facit_f_FS ~ group_combined)
# HADS
hads_hist <- df_corr_frontal %>%
ggplot(aes(hads_d_total_score)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~group_combined, scales = 'free') +
theme_classic()
kruskal.test(hads_d_total_score ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% wilcox_effsize(hads_d_total_score ~ group_combined)
# TMT A
kruskal.test(tmt_a_time ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% wilcox_effsize(tmt_a_time ~ group_combined)
# TMT B - A
kruskal.test(tmt_diff ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% wilcox_effsize(tmt_diff ~ group_combined)
# MOCA
kruskal.test(moca ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% cohens_d(moca ~ group_combined)
# Number of epochs
epoch_summary <- df_corr_frontal %>%
group_by(group_combined) %>%
summarise(mean_epoch = mean(number_epochs), sd_epoch = sd(number_epochs))
kruskal.test(number_epochs ~ group_combined, data = df_corr_frontal)
df_corr_frontal %>% ungroup() %>% cohens_d(number_epochs ~ group_combined)
# Correlation checks
cor.test(df_corr_frontal$number_epochs, df_corr_frontal$mean_delta_power)
cor.test(df_corr_central$number_epochs, df_corr_central$mean_beta_power)
cor.test(table_power_5$number_epochs, table_power_5$facit_f_FS)
# Summary behavioral table
table_behav <- df_corr_frontal %>%
group_by(group_combined) %>%
summarise(mean_facit = mean(facit_f_FS, na.rm = TRUE),
sd_facit = sd(facit_f_FS, na.rm = TRUE),
mean_hads = mean(hads_d_total_score, na.rm = TRUE),
sd_hads = sd(hads_d_total_score, na.rm = TRUE),
mean_tmta = mean(tmt_a_time),
sd_tmta = sd(tmt_a_time),
mean_tmtb_a = mean(tmt_diff),
sd_tmtb_a = sd(tmt_diff),
mean_y_o = mean(years_of_education),
sd_y_o = sd(years_of_education),
mean_epoc = mean(number_epochs),
sd_epoc = sd(number_epochs),
mean_moca = mean(moca, na.rm = TRUE),
sd_moca = sd(moca, na.rm = TRUE))
# Channel artifact summary
channel_artefacts <- table_power_5 %>%
group_by(group_combined) %>%
summarise(mean_channels_ica = mean(num_chan_ica),
sd_channels_ica = sd(num_chan_ica),
max_channels_ica = max(num_chan_ica),
min_channels_ica = min(num_chan_ica),
mean_channels_arte = mean(num_chan_artefact),
sd_channels_arte = sd(num_chan_artefact),
max_channels_arte = max(num_chan_artefact),
min_channels_arte = min(num_chan_artefact))
# Check delta distribution per group
df_corr_frontal %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot() +
geom_jitter() +
theme_classic()
# Outlier removal within participant (Â±3 SD)
table_delta_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
# Remove negative delta values
table_delta_filtered <- table_delta_filtered %>%
mutate(rel_delta = ifelse(rel_delta < 0, 0, rel_delta))
# Filter to frontal channels only
table_delta_frontal_filtered <- table_delta_filtered %>%
filter(channel %in% frontal_channels)
# Summarize mean delta power (filtered), now using cluster_4
df_corr_frontal_filtered <- table_delta_frontal_filtered %>%
group_by(participant_id, group_combined, cluster_4, age, tmt_a_time, facit_f_FS, tmt_diff, moca) %>%
summarise(mean_delta_power = mean(rel_delta), .groups = "drop")
# Plot after within-participant filtering
df_corr_frontal_filtered %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(width = 0.3, height = 0, alpha = 0.5) +
theme_classic()
# Additional filtering across group_combined
table_delta_filtered_group <- table_delta_filtered %>%
group_by(group_combined) %>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
# Keep only frontal channels
table_frontal_filtered_group <- table_delta_filtered_group %>%
filter(channel %in% frontal_channels)
# Summarize again after across-group filtering
df_corr_frontal_filtered_group <- table_frontal_filtered_group %>%
group_by(participant_id, group_combined, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_delta_power = mean(rel_delta),
mean_aperiodic_exponent = mean(aperiodic_exponent),
.groups = "drop")
# Plot updated delta power after across-group filtering
df_corr_frontal_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(width = 0.3, alpha = 0.5) +
theme_classic()
# ---- Absolute Delta Power ----
table_delta_filtered_abs <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_abs_delta = mean(abs_delta),
sd_abs_delta = sd(abs_delta),
lower_bound = mean_abs_delta - 3 * sd_abs_delta,
upper_bound = mean_abs_delta + 3 * sd_abs_delta) %>%
filter(abs_delta >= lower_bound & abs_delta <= upper_bound) %>%
ungroup()
# Keep frontal channels
table_delta_frontal_filtered_abs <- table_delta_filtered_abs %>%
filter(channel %in% frontal_channels)
# Summarize absolute delta power per participant
df_corr_frontal_filtered_abs <- table_delta_frontal_filtered_abs %>%
group_by(participant_id, group_combined, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, years_of_education) %>%
summarise(mean_delta_power_abs = mean(abs_delta), .groups = "drop")
# Plot absolute delta power
df_corr_frontal_filtered_abs %>%
ggplot(aes(x = group_combined, y = mean_delta_power_abs, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(width = 0.3, height = 0, alpha = 0.3) +
theme_classic()
# Kruskal-Wallis test across 4 groups
kruskal.test(mean_delta_power_abs ~ group_combined, data = df_corr_frontal_filtered_abs)
# Initial inspection
df_corr_central %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 1: Remove within-participant outliers (Â±3 SD)
table_beta_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_rel_beta = mean(rel_beta, na.rm = TRUE),
sd_rel_beta = sd(rel_beta, na.rm = TRUE),
lower_bound = mean_rel_beta - 3 * sd_rel_beta,
upper_bound = mean_rel_beta + 3 * sd_rel_beta) %>%
filter(rel_beta >= lower_bound & rel_beta <= upper_bound) %>%
ungroup()
# Step 2: Keep only central channels
table_central_filtered <- table_beta_filtered %>%
filter(channel %in% central_channels)
# Step 3: Summarise beta power per participant
df_corr_central_filtered <- table_central_filtered %>%
group_by(participant_id, group, cluster_4,
group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4),
tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_beta_power = mean(rel_beta, na.rm = TRUE), .groups = "drop")
# Step 4: Plot after within-participant cleaning
df_corr_central_filtered %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 5: Additional outlier removal across group_combined
table_beta_filtered_group <- table_beta_filtered %>%
group_by(group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4)) %>%
mutate(mean_rel_beta = mean(rel_beta, na.rm = TRUE),
sd_rel_beta = sd(rel_beta, na.rm = TRUE),
lower_bound = mean_rel_beta - 3 * sd_rel_beta,
upper_bound = mean_rel_beta + 3 * sd_rel_beta) %>%
filter(rel_beta >= lower_bound & rel_beta <= upper_bound) %>%
ungroup()
# Step 6: Filter again to central ROI
table_central_filtered_group <- table_beta_filtered_group %>%
filter(channel %in% central_channels)
# Step 7: Final summarised dataset
df_corr_central_filtered_group <- table_central_filtered_group %>%
group_by(participant_id, group, cluster_4,
group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4),
tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_beta_power = mean(rel_beta, na.rm = TRUE), .groups = "drop")
# Step 8: Final plot
df_corr_central_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Relative Beta Power in Central ROI",
x = "Group",
y = "Mean Beta Power [Î¼VÂ²]")
# Step 1: Remove outliers within participants (Â±3 SD)
table_ape_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_ape = mean(aperiodic_exponent, na.rm = TRUE),
sd_ape = sd(aperiodic_exponent, na.rm = TRUE),
lower_bound = mean_ape - 3 * sd_ape,
upper_bound = mean_ape + 3 * sd_ape) %>%
filter(aperiodic_exponent >= lower_bound & aperiodic_exponent <= upper_bound) %>%
ungroup()
# Step 2: Summarize per participant
df_corr_ape <- table_ape_filtered %>%
group_by(participant_id, group, cluster_4,
group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4),
tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_aperiodic_exponent = mean(aperiodic_exponent, na.rm = TRUE), .groups = "drop")
# Step 3: Plot aperiodic exponent
df_corr_ape %>%
ggplot(aes(x = group_combined, y = mean_aperiodic_exponent, color = group_combined)) +
geom_boxplot(outlier.colour = "black") +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
labs(x = "Group", y = "Mean Aperiodic Exponent") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 1: Remove outliers within participants (Â±3 SD)
table_apo_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_apo = mean(aperiodic_offset, na.rm = TRUE),
sd_apo = sd(aperiodic_offset, na.rm = TRUE),
lower_bound = mean_apo - 3 * sd_apo,
upper_bound = mean_apo + 3 * sd_apo) %>%
filter(aperiodic_offset >= lower_bound & aperiodic_offset <= upper_bound) %>%
ungroup()
# Step 2: Summarize per participant
df_corr_apo <- table_apo_filtered %>%
group_by(participant_id, group, cluster_4,
group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4),
tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_aperiodic_offset = mean(aperiodic_offset, na.rm = TRUE), .groups = "drop")
# Step 3: Plot aperiodic offset
df_corr_apo %>%
ggplot(aes(x = group_combined, y = mean_aperiodic_offset, color = group_combined)) +
geom_boxplot(outlier.colour = "black") +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
labs(x = "Group", y = "Mean Aperiodic Offset") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Define the output file path
output_folder <- "plots/final/cluster4_groups/plots"
# Define custom colors for the 4 clusters
color_palette <- c(
"no self-reported CD_c1" = "#FA8DB1",
"self-reported CD_c1" = "#C21C66",
"no self-reported CD_c2" = '#FDB57A',
"self-reported CD_c2" = '#D97700',
"no self-reported CD_c3" = "#D1A9EB",
"self-reported CD_c3" = "#8953B1",
"no self-reported CD_c4" = "#80D88A",
"self-reported CD_c4" = "#2E7D32"
)
# Make sure group_combined is a factor with correct levels
clean_data$group_combined <- factor(clean_data$group_combined, levels = names(color_palette))
# Make sure group_combined is a factor with correct levels
df_corr_ape$group_combined <- factor(df_corr_ape$group_combined, levels = names(color_palette))
# Boxplot
df_corr_ape %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_aperiodic_exponent, color = group_combined))+
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5)+
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2)+
geom_signif(comparisons = combn(unique(df_corr_ape$group_combined), 2, simplify = FALSE),
map_signif_level = TRUE, test = 'wilcox.test', color = 'black')+
labs(y = 'mean aperiodic exponent', x = 'cluster')+
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(text = element_text(size = 14))
##------ 8.3 Relative Delta Power (Frontal ROI) ---------------
# Run pairwise Wilcoxon test and filter out non-significant comparisons
pairwise_comparisons <- combn(unique(df_corr_frontal_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store results
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[1]],
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Only keep significant results (p-value < 0.05)
significant_comparisons <- pairwise_comparisons[which(pairwise_results < 0.05)]
p_values <- pairwise_results[which(pairwise_results < 0.05)]
# Create a data frame to store the significant comparisons and p-values
comparison_df <- data.frame(
Group1 = sapply(significant_comparisons, `[`, 1),
Group2 = sapply(significant_comparisons, `[`, 2),
p_value = p_values
)
# Determine y-positions for annotations to avoid overlap
# Here, you can adjust the y_positions to better fit your data
max_y <- max(df_corr_frontal_filtered_group$mean_delta_power)
y_positions <- seq(max_y * 0.8, max_y * 0.95, length.out = length(p_values))
# Make sure group_combined is a factor with correct levels
df_corr_frontal_filtered_group$group_combined <- factor(df_corr_frontal_filtered_group$group_combined, levels = names(color_palette))
# Plot
plot_rel_delta <- df_corr_frontal_filtered_group %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2) +
geom_signif(
comparisons = significant_comparisons,
map_signif_level = TRUE,
test = 'wilcox.test',
color = 'black',
y_position = y_positions, # Specify y-positions for annotations
annotations = sapply(p_values, function(p) sprintf("p = %.2g", p))
) +
labs(y = 'Mean Relative Delta Power [Î¼VÂ²] (Frontal ROI)', x = 'group and cluster') +
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(text = element_text(size = 14), axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
# Save the plot
ggsave(filename = file.path(output_folder, "rel_delta_boxplot_new.png"),
plot = plot_rel_delta,
width = 10,
height = 7)
##------ 8.3 Absolute Delta Power (Frontal ROI) ---------------
# Run pairwise Wilcoxon test and filter out non-significant comparisons
pairwise_comparisons <- combn(unique(df_corr_frontal_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store results
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[1]],
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Only keep significant results (p-value < 0.05)
significant_comparisons <- pairwise_comparisons[which(pairwise_results < 0.05)]
p_values <- pairwise_results[which(pairwise_results < 0.05)]
# Create a data frame to store the significant comparisons and p-values
comparison_df <- data.frame(
Group1 = sapply(significant_comparisons, `[`, 1),
Group2 = sapply(significant_comparisons, `[`, 2),
p_value = p_values
)
# Determine y-positions for annotations to avoid overlap
# Here, you can adjust the y_positions to better fit your data
max_y <- max(df_corr_frontal_filtered_group$mean_delta_power)
y_positions <- seq(max_y * 0.8, max_y * 0.95, length.out = length(p_values))
# Define pairwise comparisons for the Wilcoxon test
pairwise_comparisons <- combn(unique(df_corr_frontal_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store p-values
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[1]],
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Create a data frame with the comparisons and their p-values
comparison_df <- data.frame(
Group1 = sapply(pairwise_comparisons, `[`, 1),
Group2 = sapply(pairwise_comparisons, `[`, 2),
p_value = pairwise_results
)
# Display the table of comparisons and p-values
print(comparison_df)
# Pairwise Wilcoxon test
pairwise.wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power,
df_corr_frontal_filtered_group$group_combined,
p.adjust.method = "bonferroni"
)
##------ 8.3 Relative Delta Power (Frontal ROI) ---------------
# Run pairwise Wilcoxon test and filter out non-significant comparisons
pairwise_comparisons <- combn(unique(df_corr_frontal_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store results
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[1]],
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Only keep significant results (p-value < 0.05)
significant_comparisons <- pairwise_comparisons[which(pairwise_results < 0.05)]
p_values <- pairwise_results[which(pairwise_results < 0.05)]
# Create a data frame to store the significant comparisons and p-values
comparison_df <- data.frame(
Group1 = sapply(significant_comparisons, `[`, 1),
Group2 = sapply(significant_comparisons, `[`, 2),
p_value = p_values
)
# Determine y-positions for annotations to avoid overlap
# Here, you can adjust the y_positions to better fit your data
max_y <- max(df_corr_frontal_filtered_group$mean_delta_power)
y_positions <- seq(max_y * 0.8, max_y * 0.95, length.out = length(p_values))
# Make sure group_combined is a factor with correct levels
df_corr_frontal_filtered_group$group_combined <- factor(df_corr_frontal_filtered_group$group_combined, levels = names(color_palette))
# Plot
plot_rel_delta <- df_corr_frontal_filtered_group %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2) +
labs(y = 'Mean Relative Delta Power [Î¼VÂ²] (Frontal ROI)', x = 'group and cluster') +
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(text = element_text(size = 14), axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
# Save the plot
ggsave(filename = file.path(output_folder, "rel_delta_boxplot_new.png"),
plot = plot_rel_delta,
width = 10,
height = 7)
##----- 8.4 Relative Beta Power (Central ROI) -----------------
# Make sure group_combined is a factor with correct levels
df_corr_central_filtered_group$group_combined <- factor(df_corr_central_filtered_group$group_combined, levels = names(color_palette))
# Boxplot with Wilcoxon significance markers
plot_rel_beta <- df_corr_central_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2) +
labs(y = 'Mean Relative Beta Power [Î¼VÂ²] (Central ROI)', x = 'group and cluster') +
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(
text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Save the plot
ggsave(filename = file.path(output_folder, "rel_beta_boxplot.png"),
plot = plot_rel_beta,
width = 10,
height = 7)
