mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
# Set negative values to 0
table_delta_filtered$rel_delta <- ifelse(table_delta_filtered$rel_delta < 0, 0, table_delta_filtered$rel_delta)
# Visualize cleaned data
table_delta_filtered %>%
group_by(cluster_4) %>%
ggplot(aes(x = cluster_4, y = rel_delta, color = cluster_4)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter()
# Keep only frontal channels
table_delta_frontal_filtered <- table_delta_filtered %>%
filter(channel %in% frontal_channels)
# Average per participant
df_corr_frontal_filtered <- table_delta_frontal_filtered %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, years_of_education, moca) %>%
summarise(mean_delta_power = mean(rel_delta), .groups = "drop")
# Visualize
df_corr_frontal_filtered %>%
ggplot(aes(x = cluster_4, y = mean_delta_power, color = cluster_4)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter()
# Additional filtering across clusters (group-based 3SD)
table_delta_filtered_group <- table_delta_filtered %>%
group_by(cluster_4) %>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
table_frontal_filtered_group <- table_delta_filtered_group %>%
filter(channel %in% frontal_channels)
df_corr_frontal_filtered_group <- table_frontal_filtered_group %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(
mean_delta_power = mean(rel_delta),
mean_aperiodic_exponent = mean(aperiodic_exponent),
.groups = "drop"
)
# Visualize
df_corr_frontal_filtered_group %>%
ggplot(aes(x = cluster_4, y = mean_delta_power, color = cluster_4)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter()
# Statistical test
kruskal.test(mean_delta_power ~ cluster_4, data = df_corr_frontal_filtered_group)
table_delta_filtered_abs <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_abs_delta = mean(abs_delta),
sd_abs_delta = sd(abs_delta),
lower_bound = mean_abs_delta - 3 * sd_abs_delta,
upper_bound = mean_abs_delta + 3 * sd_abs_delta) %>%
filter(abs_delta >= lower_bound & abs_delta <= upper_bound) %>%
ungroup()
table_delta_frontal_filtered_abs <- table_delta_filtered_abs %>%
filter(channel %in% frontal_channels)
df_corr_frontal_filtered_abs <- table_delta_frontal_filtered_abs %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, years_of_education) %>%
summarise(mean_delta_power_abs = mean(abs_delta), .groups = "drop")
df_corr_frontal_filtered_abs %>%
ggplot(aes(x = cluster_4, y = mean_delta_power_abs, color = cluster_4)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter()
kruskal.test(mean_delta_power_abs ~ cluster_4, data = df_corr_frontal_filtered_abs)
# Check original distribution
df_corr_central %>%
ggplot(aes(x = cluster_4, y = mean_beta_power, color = cluster_4)) +
geom_boxplot()
# Participant-wise 3SD filter
table_beta_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_rel_beta = mean(rel_beta),
sd_rel_beta = sd(rel_beta),
lower_bound = mean_rel_beta - 3 * sd_rel_beta,
upper_bound = mean_rel_beta + 3 * sd_rel_beta) %>%
filter(rel_beta >= lower_bound & rel_beta <= upper_bound) %>%
ungroup()
table_central_filtered <- table_beta_filtered %>%
filter(channel %in% central_channels)
df_corr_central_filtered <- table_central_filtered %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_beta_power = mean(rel_beta), .groups = "drop")
df_corr_central_filtered %>%
ggplot(aes(x = cluster_4, y = mean_beta_power, color = cluster_4)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter()
# Additional group-level filtering
table_beta_filtered_group <- table_beta_filtered %>%
group_by(cluster_4) %>%
mutate(mean_rel_beta = mean(rel_beta),
sd_rel_beta = sd(rel_beta),
lower_bound = mean_rel_beta - 3 * sd_rel_beta,
upper_bound = mean_rel_beta + 3 * sd_rel_beta) %>%
filter(rel_beta >= lower_bound & rel_beta <= upper_bound) %>%
ungroup()
table_central_filtered_group <- table_beta_filtered_group %>%
filter(channel %in% central_channels)
df_corr_central_filtered_group <- table_central_filtered_group %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_beta_power = mean(rel_beta), .groups = "drop")
df_corr_central_filtered_group %>%
ggplot(aes(x = cluster_4, y = mean_beta_power, color = cluster_4)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter()
# Statistical test
kruskal.test(mean_beta_power ~ cluster_4, data = df_corr_central_filtered_group)
table_ape_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_ape = mean(aperiodic_exponent),
sd_ape = sd(aperiodic_exponent),
lower_bound = mean_ape - 3 * sd_ape,
upper_bound = mean_ape + 3 * sd_ape) %>%
filter(aperiodic_exponent >= lower_bound & aperiodic_exponent <= upper_bound) %>%
ungroup()
df_corr_ape <- table_ape_filtered %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_aperiodic_exponent = mean(aperiodic_exponent), .groups = "drop")
# Plot
df_corr_ape %>%
ggplot(aes(x = cluster_4, y = mean_aperiodic_exponent, color = cluster_4)) +
geom_boxplot(outlier.colour = "black") +
geom_jitter(width = 0.2, alpha = 0.7) +
theme_classic() +
labs(y = "Mean Aperiodic Exponent")
# Kruskal-Wallis test
kruskal.test(mean_aperiodic_exponent ~ cluster_4, data = df_corr_ape)
table_apo_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_apo = mean(aperiodic_offset),
sd_apo = sd(aperiodic_offset),
lower_bound = mean_apo - 3 * sd_apo,
upper_bound = mean_apo + 3 * sd_apo) %>%
filter(aperiodic_offset >= lower_bound & aperiodic_offset <= upper_bound) %>%
ungroup()
df_corr_apo <- table_apo_filtered %>%
group_by(participant_id, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_aperiodic_offset = mean(aperiodic_offset), .groups = "drop")
# Plot
df_corr_apo %>%
ggplot(aes(x = cluster_4, y = mean_aperiodic_offset, color = cluster_4)) +
geom_boxplot(outlier.colour = "black") +
geom_jitter(width = 0.2, alpha = 0.7) +
theme_classic() +
labs(y = "Mean Aperiodic Offset")
# Kruskal-Wallis test
kruskal.test(mean_aperiodic_offset ~ cluster_4, data = df_corr_apo)
#-------- 6. export tables for topoplots ---------------------
# Define cluster labels
clusters <- c("c1", "c2", "c3", "c4")
# Function to export topoplot data
export_topoplot_data <- function(df, cluster_col, value_col, file_prefix) {
for (cl in clusters) {
export_df <- df %>%
filter(.data[[cluster_col]] == cl) %>%
mutate(channel = as.numeric(channel)) %>%
group_by(channel) %>%
summarise(mean_val = mean(.data[[value_col]], na.rm = TRUE), .groups = "drop") %>%
arrange(channel) %>%
mutate(channel = replace(channel, is.na(channel), "Gnd"))
write.table(export_df,
file = paste0("export_", file_prefix, "_", cl, ".txt"),
row.names = FALSE,
col.names = FALSE)
cat("Cluster:", cl, "\n")
print(export_df %>%
summarise(min = min(mean_val),
max = max(mean_val)))
cat("\n")
}
}
# Export beta power
export_topoplot_data(table_beta_filtered_group, "cluster_4", "rel_beta", "beta")
# Export delta power
export_topoplot_data(table_delta_filtered_group, "cluster_4", "rel_delta", "delta")
# Export aperiodic exponent
export_topoplot_data(table_ape_filtered, "cluster_4", "aperiodic_exponent", "ape")
# Export aperiodic offset
export_topoplot_data(table_apo_filtered, "cluster_4", "aperiodic_offset", "apo")
# Export r_squared (use table_power_5 directly)
export_topoplot_data(table_power_5, "cluster_4", "r_squared", "r")
# Shapiro-Wilk normality test for each cluster: DELTA POWER
shapiro_clusters <- split(df_corr_frontal_filtered_group, df_corr_frontal_filtered_group$cluster_4)
cat("Shapiro-Wilk test for mean_delta_power:\n")
lapply(names(shapiro_clusters), function(cl) {
cat("Cluster", cl, ": ")
print(shapiro.test(shapiro_clusters[[cl]]$mean_delta_power))
})
# Plot histogram for delta
df_corr_frontal_filtered_group %>%
ggplot(aes(x = mean_delta_power)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~cluster_4, scales = "free") +
theme_classic() +
labs(title = "Mean Delta Power Distribution by Cluster")
# Shapiro-Wilk test for BETA POWER
shapiro_clusters_beta <- split(df_corr_central_filtered_group, df_corr_central_filtered_group$cluster_4)
cat("\nShapiro-Wilk test for mean_beta_power:\n")
lapply(names(shapiro_clusters_beta), function(cl) {
cat("Cluster", cl, ": ")
print(shapiro.test(shapiro_clusters_beta[[cl]]$mean_beta_power))
})
df_corr_central_filtered_group %>%
ggplot(aes(x = mean_beta_power)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~cluster_4, scales = "free") +
theme_classic() +
labs(title = "Mean Beta Power Distribution by Cluster")
# Shapiro-Wilk test for APERIODIC OFFSET
shapiro_clusters_apo <- split(df_corr_apo, df_corr_apo$cluster_4)
cat("\nShapiro-Wilk test for mean_aperiodic_offset:\n")
lapply(names(shapiro_clusters_apo), function(cl) {
cat("Cluster", cl, ": ")
print(shapiro.test(shapiro_clusters_apo[[cl]]$mean_aperiodic_offset))
})
df_corr_apo %>%
ggplot(aes(x = mean_aperiodic_offset)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~cluster_4, scales = "free") +
theme_classic() +
labs(title = "Mean Aperiodic Offset Distribution by Cluster")
# Shapiro-Wilk test for APERIODIC EXPONENT
shapiro_clusters_ape <- split(df_corr_ape, df_corr_ape$cluster_4)
cat("\nShapiro-Wilk test for mean_aperiodic_exponent:\n")
lapply(names(shapiro_clusters_ape), function(cl) {
cat("Cluster", cl, ": ")
print(shapiro.test(shapiro_clusters_ape[[cl]]$mean_aperiodic_exponent))
})
df_corr_ape %>%
ggplot(aes(x = mean_aperiodic_exponent)) +
geom_histogram(color = "black", fill = "white", bins = sqrt(100)) +
facet_wrap(~cluster_4, scales = "free") +
theme_classic() +
labs(title = "Mean Aperiodic Exponent Distribution by Cluster")
cat("\nLevene's Test Results:\n")
cat("Delta Power:\n")
print(leveneTest(mean_delta_power ~ cluster_4, data = df_corr_frontal_filtered_group))
cat("\nBeta Power:\n")
print(leveneTest(mean_beta_power ~ cluster_4, data = df_corr_central_filtered_group))
cat("\nAperiodic Offset:\n")
print(leveneTest(mean_aperiodic_offset ~ cluster_4, data = df_corr_apo))
cat("\nAperiodic Exponent:\n")
print(leveneTest(mean_aperiodic_exponent ~ cluster_4, data = df_corr_ape))
# ----- 8. boxplots and stats -------------------
# Define custom colors
color_palette <- c("c1" = '#02CAF5',
"c2" = "#F59541")
# ----- 8. boxplots and stats -------------------
# Define color palette for 4 clusters
color_palette <- c(
"c1" = '#02CAF5',
"c2" = "#F59541",
"c3" = "#B589D6",
"c4" = "#F5418C"
)
# Helper function: run Kruskal-Wallis, pairwise Wilcoxon, and plot
plot_and_stats <- function(df, outcome, ylabel) {
outcome_sym <- rlang::sym(outcome)
# Boxplot
p <- ggplot(df, aes(x = cluster_4, y = !!outcome_sym, color = cluster_4)) +
geom_boxplot(size = 0.75, outlier.colour = 'black', width = 0.5) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
scale_color_manual(values = color_palette) +
theme_classic(base_size = 14) +
labs(y = ylabel, x = "Cluster") +
guides(color = FALSE)
print(p)
# Kruskal-Wallis test
cat("\n🔹 Kruskal-Wallis test for", outcome, ":\n")
print(kruskal.test(reformulate("cluster_4", outcome), data = df))
# Pairwise Wilcoxon test
pairwise <- df %>%
pairwise_wilcox_test(reformulate("cluster_4", outcome), p.adjust.method = "bonferroni")
cat("\n🔸 Pairwise Wilcoxon tests:\n")
print(pairwise)
# Effect size
cat("\n📏 Kruskal effect size:\n")
print(df %>% kruskal_effsize(reformulate("cluster_4", outcome)))
}
# Example usage for each variable:
# Make sure your cluster_4 column is a factor
df_corr_ape$cluster_4 <- as.factor(df_corr_ape$cluster_4)
df_corr_apo$cluster_4 <- as.factor(df_corr_apo$cluster_4)
df_corr_frontal_filtered_group$cluster_4 <- as.factor(df_corr_frontal_filtered_group$cluster_4)
df_corr_frontal_filtered_abs$cluster_4 <- as.factor(df_corr_frontal_filtered_abs$cluster_4)
df_corr_central_filtered_group$cluster_4 <- as.factor(df_corr_central_filtered_group$cluster_4)
# 8.1 Aperiodic Exponent
plot_and_stats(df_corr_ape, "mean_aperiodic_exponent", "Mean Aperiodic Exponent")
# 8.2 Aperiodic Offset
plot_and_stats(df_corr_apo, "mean_aperiodic_offset", "Mean Aperiodic Offset")
# 8.3 Relative Delta Power (Frontal ROI)
plot_and_stats(df_corr_frontal_filtered_group, "mean_delta_power", "Mean Delta Power [μV²] (Frontal ROI)")
# 8.3 Absolute Delta Power
plot_and_stats(df_corr_frontal_filtered_abs, "mean_delta_power_abs", "Mean Absolute Delta Power [μV²] (Frontal ROI)")
# 8.4 Relative Beta Power (Central ROI)
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power", "Mean Beta Power [μV²] (Central ROI)")
# Helper function: Boxplot + Kruskal-Wallis + pairwise Wilcoxon + effect size + p-value annotations
plot_and_stats <- function(df, outcome, ylabel) {
outcome_sym <- rlang::sym(outcome)
# Ensure cluster is factor
df$cluster_4 <- as.factor(df$cluster_4)
# Kruskal-Wallis
cat("\n🔹 Kruskal-Wallis test for", outcome, ":\n")
print(kruskal.test(reformulate("cluster_4", outcome), data = df))
# Pairwise Wilcoxon test with Bonferroni correction
pairwise_stats <- df %>%
pairwise_wilcox_test(reformulate("cluster_4", outcome), p.adjust.method = "bonferroni") %>%
add_xy_position(x = "cluster_4", fun = "median")  # auto position for annotations
cat("\n🔸 Pairwise Wilcoxon tests:\n")
print(pairwise_stats)
# Effect size
cat("\n📏 Kruskal effect size:\n")
print(df %>% kruskal_effsize(reformulate("cluster_4", outcome)))
# Boxplot with significance annotations
p <- ggplot(df, aes(x = cluster_4, y = !!outcome_sym, color = cluster_4)) +
geom_boxplot(size = 0.75, outlier.colour = 'black', width = 0.5) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
stat_pvalue_manual(
pairwise_stats,
hide.ns = TRUE,
label = "p.adj.signif",
tip.length = 0.01,
size = 4
) +
scale_color_manual(values = color_palette) +
theme_classic(base_size = 14) +
labs(y = ylabel, x = "Cluster") +
guides(color = FALSE)
print(p)
}
plot_and_stats(df_corr_ape, "mean_aperiodic_exponent", "Mean Aperiodic Exponent")
plot_and_stats(df_corr_apo, "mean_aperiodic_offset", "Mean Aperiodic Offset")
plot_and_stats(df_corr_frontal_filtered_group, "mean_delta_power", "Mean Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_frontal_filtered_abs, "mean_delta_power_abs", "Absolute Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power", "Mean Beta Power [μV²] (Central ROI)")
# Custom plotting + stats function
plot_and_stats <- function(df, outcome, ylabel) {
outcome_sym <- rlang::sym(outcome)
# Make sure cluster_4 is a factor
df$cluster_4 <- as.factor(df$cluster_4)
# Kruskal-Wallis test
cat("\n🔹 Kruskal-Wallis test for", outcome, ":\n")
print(kruskal.test(reformulate("cluster_4", outcome), data = df))
# Pairwise Wilcoxon test with Bonferroni correction
pairwise_stats <- df %>%
pairwise_wilcox_test(
formula = reformulate("cluster_4", outcome),
p.adjust.method = "bonferroni"
) %>%
add_xy_position(x = "cluster_4", fun = "median")  # position for significance labels
cat("\n🔸 Pairwise Wilcoxon tests:\n")
print(pairwise_stats)
# Effect size
cat("\n📏 Kruskal effect size:\n")
print(df %>% kruskal_effsize(reformulate("cluster_4", outcome)))
# Create plot
p <- ggplot(df, aes(x = cluster_4, y = !!outcome_sym, color = cluster_4)) +
geom_boxplot(size = 0.75, outlier.colour = 'black', width = 0.5) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
stat_pvalue_manual(
pairwise_stats,
hide.ns = FALSE,             # <-- Show "ns" for non-significant comparisons
label = "p.adj.signif",      # <-- Use stars or "ns"
tip.length = 0.01,
size = 4
) +
expand_limits(y = max(df[[outcome]], na.rm = TRUE) * 1.15) +  # extra space for labels
scale_color_manual(values = color_palette) +
theme_classic(base_size = 14) +
labs(y = ylabel, x = "Cluster") +
guides(color = FALSE)
print(p)
}
plot_and_stats(df_corr_ape, "mean_aperiodic_exponent", "Mean Aperiodic Exponent")
plot_and_stats <- function(df, outcome, ylabel) {
outcome_sym <- rlang::sym(outcome)
df$cluster_4 <- as.factor(df$cluster_4)
# Kruskal-Wallis test
cat("\n🔹 Kruskal-Wallis test for", outcome, ":\n")
print(kruskal.test(reformulate("cluster_4", outcome), data = df))
# Pairwise Wilcoxon test with Bonferroni correction
pairwise_stats <- df %>%
pairwise_wilcox_test(
formula = reformulate("cluster_4", outcome),
p.adjust.method = "bonferroni"
) %>%
add_xy_position(x = "cluster_4", fun = "median")
# Raise the y positions for all comparisons (helps visibility)
pairwise_stats <- pairwise_stats %>%
mutate(y.position = y.position + max(df[[outcome]], na.rm = TRUE) * 0.2)
cat("\n🔸 Pairwise Wilcoxon tests:\n")
print(pairwise_stats)
# Effect size
cat("\n📏 Kruskal effect size:\n")
print(df %>% kruskal_effsize(reformulate("cluster_4", outcome)))
# Plot with significance annotations
p <- ggplot(df, aes(x = cluster_4, y = !!outcome_sym, color = cluster_4)) +
geom_boxplot(size = 0.75, outlier.colour = 'black', width = 0.5) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
stat_pvalue_manual(
pairwise_stats,
hide.ns = FALSE,
label = "p.adj.signif",
tip.length = 0.01,
size = 4
) +
expand_limits(y = max(pairwise_stats$y.position, na.rm = TRUE) * 1.1) +  # allow headroom
scale_color_manual(values = color_palette) +
theme_classic(base_size = 14) +
labs(y = ylabel, x = "Cluster") +
guides(color = FALSE)
print(p)
}
plot_and_stats(df_corr_ape, "mean_aperiodic_exponent", "Mean Aperiodic Exponent")
plot_and_stats(df_corr_apo, "mean_aperiodic_offset", "Mean Aperiodic Offset")
plot_and_stats(df_corr_frontal_filtered_group, "mean_delta_power", "Mean Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_frontal_filtered_abs, "mean_delta_power_abs", "Absolute Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power", "Mean Beta Power [μV²] (Central ROI)")
plot_and_stats <- function(df, outcome, ylabel) {
outcome_sym <- rlang::sym(outcome)
df$cluster_4 <- as.factor(df$cluster_4)
# Kruskal-Wallis
cat("\n🔹 Kruskal-Wallis test for", outcome, ":\n")
print(kruskal.test(reformulate("cluster_4", outcome), data = df))
# Pairwise Wilcoxon
pairwise_stats <- df %>%
pairwise_wilcox_test(
formula = reformulate("cluster_4", outcome),
p.adjust.method = "bonferroni"
) %>%
add_xy_position(x = "cluster_4", fun = "median")
# 🔺 Set ALL labels to be at top of the plot
top_y <- max(df[[outcome]], na.rm = TRUE)
pairwise_stats$y.position <- top_y * 1.15  # Pushes them high above everything
cat("\n🔸 Pairwise Wilcoxon tests:\n")
print(pairwise_stats)
# Effect size
cat("\n📏 Kruskal effect size:\n")
print(df %>% kruskal_effsize(reformulate("cluster_4", outcome)))
# Plot
p <- ggplot(df, aes(x = cluster_4, y = !!outcome_sym, color = cluster_4)) +
geom_boxplot(size = 0.75, outlier.colour = 'black', width = 0.5) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
stat_pvalue_manual(
pairwise_stats,
hide.ns = FALSE,
label = "p.adj.signif",  # or use paste() for raw p-values
tip.length = 0.01,
size = 4
) +
expand_limits(y = top_y * 1.3) +  # Extra headroom for long comparisons
scale_color_manual(values = color_palette) +
theme_classic(base_size = 14) +
labs(y = ylabel, x = "Cluster") +
guides(color = FALSE)
print(p)
}
plot_and_stats(df_corr_ape, "mean_aperiodic_exponent", "Mean Aperiodic Exponent")
plot_and_stats(df_corr_apo, "mean_aperiodic_offset", "Mean Aperiodic Offset")
plot_and_stats(df_corr_frontal_filtered_group, "mean_delta_power", "Mean Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_frontal_filtered_abs, "mean_delta_power_abs", "Absolute Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power", "Mean Beta Power [μV²] (Central ROI)")
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power_abs", "Absolute Beta Power [μV²] (Central ROI)")
plot_and_stats <- function(df, outcome, ylabel) {
outcome_sym <- rlang::sym(outcome)
df$cluster_4 <- as.factor(df$cluster_4)
# Kruskal-Wallis
cat("\n🔹 Kruskal-Wallis test for", outcome, ":\n")
print(kruskal.test(reformulate("cluster_4", outcome), data = df))
# Pairwise Wilcoxon
pairwise_stats <- df %>%
pairwise_wilcox_test(
formula = reformulate("cluster_4", outcome),
p.adjust.method = "bonferroni"
) %>%
add_xy_position(x = "cluster_4", fun = "median")
# 🔺 Set ALL labels to be at top of the plot
top_y <- max(df[[outcome]], na.rm = TRUE)
pairwise_stats$y.position <- top_y * 1.15  # Pushes them high above everything
cat("\n🔸 Pairwise Wilcoxon tests:\n")
print(pairwise_stats)
# Effect size
cat("\n📏 Kruskal effect size:\n")
print(df %>% kruskal_effsize(reformulate("cluster_4", outcome)))
# Plot
p <- ggplot(df, aes(x = cluster_4, y = !!outcome_sym, color = cluster_4)) +
geom_boxplot(size = 0.75, outlier.colour = 'black', width = 0.5) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
stat_pvalue_manual(
pairwise_stats,
hide.ns = FALSE,
label = "p.adj.signif",  # or use paste() for raw p-values
tip.length = 0.01,
size = 4
) +
expand_limits(y = top_y * 1.3) +  # Extra headroom for long comparisons
scale_color_manual(values = color_palette) +
theme_classic(base_size = 14) +
labs(y = ylabel, x = "Cluster") +
guides(color = FALSE)
print(p)
}
plot_and_stats(df_corr_ape, "mean_aperiodic_exponent", "Mean Aperiodic Exponent")
plot_and_stats(df_corr_apo, "mean_aperiodic_offset", "Mean Aperiodic Offset")
plot_and_stats(df_corr_frontal_filtered_group, "mean_delta_power", "Mean Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_frontal_filtered_abs, "mean_delta_power_abs", "Absolute Delta Power [μV²] (Frontal ROI)")
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power", "Mean Beta Power [μV²] (Central ROI)")
plot_and_stats(df_corr_central_filtered_group, "mean_beta_power_abs", "Absolute Beta Power [μV²] (Central ROI)")
