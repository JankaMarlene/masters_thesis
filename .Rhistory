ward_col_dend <- color_branches(ward_dend_obj, h = 10)
plot(ward_col_dend)
# Append cluster results obtained back in the original dataframe
# Use mutate
# Count how many observations were assigned to each cluster with the count function
cog_df_cl <- mutate(cog_df, cluster = cut_ward)
count(cog_df_cl,cluster)
# Cross-checking clustering results using table function
table(cog_df_cl$cluster,cog_label)
# Add the cluster information from cog_df_cl to clean_data
clean_data$cluster <- cog_df_cl$cluster
# Check the updated structure of clean_data
str(clean_data)
# Checking sex in cluster
table(cog_df_cl$cluster,clean_data$sex)
#--------
cluster_info <- clean_data %>%
select(participant_id, cluster)
# Load the participants.tsv file
participants <- read.delim("C:/Users/jankj/OneDrive/Desktop/masters_thesis/data/merged_data.tsv", na.strings = "n/a", header = TRUE)
# Check the structure of participants to identify a common identifier
str(participants)
# Merge the clean_data with participants based on a common identifier
merged_data <- participants %>%
left_join(cluster_info, by = "participant_id")
merged_data <- merged_data %>%
rename(cluster_4 = cluster)
# Check the structure of the merged data to ensure everything is correct
str(merged_data)
# Optionally, save the merged data to a new file
write_tsv(merged_data, "C:/Users/jankj/OneDrive/Desktop/masters_thesis/data/merged_data_all.tsv")
# Calculate means and standard deviations for age by cluster
age_stats <- clean_data %>%
group_by(cog_df_cl$cluster) %>%
summarise(
mean = round(mean(age, na.rm = TRUE), 2),
sd = round(sd(age, na.rm = TRUE), 2)
)
# Plotting age distribution between clusters with mean as text
ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = age)) +
# Custom boxplot without median line
stat_boxplot(geom = "errorbar", width = 0.25) +  # Add whiskers
geom_boxplot(aes(group = as.factor(cog_df_cl$cluster)), color = "black", fill = "gray80") +
stat_summary(fun = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..), width = 0.75, size = 1, color = "black") +
stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 1)), vjust = -0.5, color = "black") +
labs(x = "Cluster", y = "Age", title = "Age Distribution between Clusters") +
theme_bw()
# Perform ANOVA for age between clusters
anova_age <- aov(age ~ as.factor(cog_df_cl$cluster), data = clean_data)
# Calculate mean and sd for each group within each cluster
mean_sd_stats <- clean_data %>%
group_by(cog_df_cl$cluster, group) %>%
summarise(
mean = round(mean(age, na.rm = TRUE), 2),
sd = round(sd(age, na.rm = TRUE), 2)
)
# Display mean and sd for each group within each cluster
print(mean_sd_stats)
# Plotting age distribution within clusters based on withPCS and withoutPCS labels with mean as text
ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = age, fill = group)) +
geom_boxplot(position = position_dodge(width = 0.75)) + # Adjust position of boxplots
stat_summary(fun = mean, geom = "point", position = position_dodge(width = 0.75), # Adjust position of points
shape = 18, size = 4, color = "red") + # Add mean point
stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 1)),
position = position_dodge(width = 0.75), vjust = -0.5) + # Add mean as text
labs(x = "Cluster", y = "Age", title = "Age Distribution within Clusters based on withPCS and withoutPCS Labels")
# Perform ANOVA for age within "withPCS" group between clusters
anova_withPCS <- aov(age ~ as.factor(cluster), data = subset(clean_data, group == "withPCS"))
# Perform ANOVA for age within "withoutPCS" group between clusters
anova_withoutPCS <- aov(age ~ as.factor(cluster), data = subset(clean_data, group == "withoutPCS"))
# Display ANOVA results for "withPCS" group
summary(anova_withPCS)
# Display ANOVA results for "withoutPCS" group
summary(anova_withoutPCS)
# Cluster 1
cluster_1_data <- subset(clean_data, cluster == 1)
t_test_cluster_1 <- t.test(age ~ group, data = cluster_1_data)
t_test_cluster_1
# Cluster 2
cluster_2_data <- subset(clean_data, cluster == 2)
t_test_cluster_2 <- t.test(age ~ group, data = cluster_2_data)
t_test_cluster_2
# Cluster 3
cluster_3_data <- subset(clean_data, cluster == 3)
t_test_cluster_3 <- t.test(age ~ group, data = cluster_3_data)
t_test_cluster_3
# Cluster 4
cluster_4_data <- subset(clean_data, cluster == 4)
t_test_cluster_4 <- t.test(age ~ group, data = cluster_4_data)
t_test_cluster_4
# Ensure the cluster variable is part of the clean_data dataframe
clean_data$cluster <- cog_df_cl$cluster
# Calculate means of years_of_education by cluster
cluster_means <- tapply(clean_data$years_of_education, clean_data$cluster, FUN = mean)
cluster_means
# Calculate standard deviations of years_of_education by cluster
cluster_sds <- tapply(clean_data$years_of_education, clean_data$cluster, FUN = sd)
cluster_sds
# Combine means and standard deviations into a data frame
cluster_stats <- data.frame(
cluster = names(cluster_means),
mean = round(cluster_means, 2),
sd = round(cluster_sds, 2)
)
# Print the cluster statistics
cluster_stats
# Perform ANOVA for years of education between clusters
anova_education <- aov(years_of_education ~ as.factor(cluster), data = clean_data)
# Display ANOVA results
summary(anova_education)
# Calculate mean and sd for each group within each cluster
mean_sd_stats <- clean_data %>%
group_by(cluster, group) %>%
summarise(
mean = round(mean(years_of_education, na.rm = TRUE), 2),
sd = round(sd(years_of_education, na.rm = TRUE), 2)
)
# Display mean and sd for each group within each cluster
print(mean_sd_stats)
# Perform ANOVA for years of education within the "withPCS" group between clusters
anova_withPCS_education <- aov(years_of_education ~ as.factor(cluster), data = subset(clean_data, group == "withPCS"))
# Display ANOVA results for the "withPCS" group
summary(anova_withPCS_education)
# Perform ANOVA for years of education within the "withoutPCS" group between clusters
anova_withoutPCS_education <- aov(years_of_education ~ as.factor(cluster), data = subset(clean_data, group == "withoutPCS"))
# Display ANOVA results for the "withoutPCS" group
summary(anova_withoutPCS_education)
# Plotting years of education distribution within clusters based on withPCS and withoutPCS labels with mean as text
ggplot(clean_data, aes(x = as.factor(cluster), y = years_of_education, fill = group)) +
geom_boxplot(position = position_dodge(width = 0.75)) + # Adjust position of boxplots
stat_summary(fun = mean, geom = "point", position = position_dodge(width = 0.75), # Adjust position of points
shape = 18, size = 4, color = "red") + # Add mean point
stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 1)),
position = position_dodge(width = 0.75), vjust = -0.5) + # Add mean as text
labs(x = "Cluster", y = "Years of Education", title = "Years of Education Distribution within Clusters based on withPCS and withoutPCS Labels")
# Cluster 1
cluster_1_data <- subset(clean_data, cluster == 1)
t_test_cluster_1 <- t.test(years_of_education ~ group, data = cluster_1_data)
t_test_cluster_1
# Cluster 2
cluster_2_data <- subset(clean_data, cluster == 2)
t_test_cluster_2 <- t.test(years_of_education ~ group, data = cluster_2_data)
t_test_cluster_2
# Cluster 3
cluster_3_data <- subset(clean_data, cluster == 3)
t_test_cluster_3 <- t.test(years_of_education ~ group, data = cluster_3_data)
t_test_cluster_3
# Cluster 4
cluster_4_data <- subset(clean_data, cluster == 4)
t_test_cluster_4 <- t.test(years_of_education ~ group, data = cluster_4_data)
t_test_cluster_4
# Vector of cognitive variables
variables <- c("pvt_reaction_time", "nback_miss_1", "nback_miss_2", "tmt_a_time", "tmt_b_time", "tmt_diff")
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each variable to create boxplots
for (variable in variables) {
plot <- ggplot(clean_data, aes(x = as.factor(cluster), y = !!sym(variable))) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize lists to store results
anova_results <- list()
descriptive_stats_list <- list()
normality_results <- list()
homogeneity_results <- list()
effect_sizes <- list()
# Perform ANOVA, calculate descriptive statistics, check assumptions, and calculate effect sizes
for (variable in variables) {
# Perform ANOVA
anova_result <- aov(clean_data[[variable]] ~ as.factor(cluster), data = clean_data)
anova_results[[variable]] <- summary(anova_result)
# Calculate descriptive statistics
descriptive_stats <- clean_data %>%
group_by(cluster = as.factor(cluster)) %>%
summarise(
mean = round(mean(!!sym(variable), na.rm = TRUE), 2),
sd = round(sd(!!sym(variable), na.rm = TRUE), 2)
) %>%
mutate(
mean = format(mean, nsmall = 2),
sd = format(sd, nsmall = 2)
)
descriptive_stats_list[[variable]] <- descriptive_stats
# Check normality of residuals
# shapiro_test <- shapiro.test(residuals(lm(clean_data[[variable]] ~ as.factor(cluster), data = clean_data)))
#normality_results[[variable]] <- shapiro_test
# Check homogeneity of variances
#levene_test <- car::leveneTest(clean_data[[variable]] ~ as.factor(cluster), data = clean_data)
#homogeneity_results[[variable]] <- levene_test
# Calculate effect size (Eta Squared)
#eta_squared <- summary(anova_result)[[1]][["Sum Sq"]][1] / sum(summary(anova_result)[[1]][["Sum Sq"]])
#effect_sizes[[variable]] <- eta_squared
}
# Perform ANOVA, calculate descriptive statistics, check assumptions, and calculate effect sizes
for (variable in variables) {
# Perform ANOVA
anova_result <- aov(clean_data[[variable]] ~ as.factor(cluster), data = clean_data)
anova_results[[variable]] <- summary(anova_result)
# Calculate descriptive statistics
descriptive_stats <- clean_data %>%
group_by(cluster = as.factor(cluster)) %>%
summarise(
mean = round(mean(!!sym(variable), na.rm = TRUE), 2),
sd = round(sd(!!sym(variable), na.rm = TRUE), 2)
) %>%
mutate(
mean = format(mean, nsmall = 2),
sd = format(sd, nsmall = 2)
)
descriptive_stats_list[[variable]] <- descriptive_stats
# Check normality of residuals
shapiro_test <- shapiro.test(residuals(lm(clean_data[[variable]] ~ as.factor(cluster), data = clean_data)))
normality_results[[variable]] <- shapiro_test
# Check homogeneity of variances
levene_test <- car::leveneTest(clean_data[[variable]] ~ as.factor(cluster), data = clean_data)
homogeneity_results[[variable]] <- levene_test
# Calculate effect size (Eta Squared)
eta_squared <- summary(anova_result)[[1]][["Sum Sq"]][1] / sum(summary(anova_result)[[1]][["Sum Sq"]])
effect_sizes[[variable]] <- eta_squared
}
# Display results
anova_results
descriptive_stats_list
normality_results
homogeneity_results
effect_sizes
#------------ 1. load packages------------------
library(tidyverse)
library(carData)
library(car)
library(readr)
library(ggdist)
library(ggExtra)# displaying distributions next to plots
library(ggsignif)# displaying stats in plots
library(ggplot2)
library(ggpubr)
library(coin)# need this for z value of wilcox test
library(effsize)# for cohens d
library(rstatix)# for wilcox test
table_power_5 <- read_csv("data/analysis_power/table_power_final_5.csv")
setwd("C:/Users/jankj/OneDrive/Desktop/masters_thesis")
table_power_5 <- read_csv("data/analysis_power/table_power_final_5.csv")
number_of_epochs_5 <- read_csv("data/analysis_power/number_of_epochs_5.csv")
# this would be the amount of people where more than half of the data is good
number_of_epochs%>%
filter(number_epochs > 37.5)# here 70
number_of_epochs%>%
filter(number_epochs > 50)# here 61
number_of_epochs%>%
filter(number_epochs < 51)# these subjects have to be excluded
number_of_epochs_5%>%
filter(number_epochs > 37.5)# here 62
number_of_epochs_5%>%
filter(number_epochs < 37.5)# these subjects have to be excluded
# modify table (f.ex. add tmt b-a)
table_power_5 <- table_power_5%>%
mutate(facit_f_FS = as.numeric(facit_f_FS),
tmt_b_minus_a = tmt_b_time-tmt_a_time)
table_power_5 <- merge(table_power_5, number_of_epochs_5)
test <- table_power%>%
# group_by(participant_id,group,number_epochs)%>%
# summarise(mean_delta_power = mean(rel_delta))%>%
# filter(number_epochs > 37.5)%>%
# count()
test_table <- table_power_5%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,age,years_of_education,number_epochs,cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_beta_power = mean(rel_beta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
test_table <- table_power_5%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,age,years_of_education,number_epochs,cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_beta_power = mean(rel_beta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
test_table%>%
group_by(cluster_2)%>%
summarise(mean_age = mean(age),
sd_age = sd(age),
mean_epochs = mean(number_epochs))# sind immerhin fast identisch vom Alter her
t.test(age~cluster_2, data = test_table, alternative = "two.sided")
# Define the channel names you want to select (for delta)
frontal_channels <- c('22','105','11','40','75','39','49','82','48','19','112','25','94','93','83','92','95','96','21','50','10','59','26')
# Filter rows with the specified channel names
table_power_frontal <- table_power_5%>%
filter(table_power_5$channel %in% frontal_channels)
# Define the channel names you want to select (for beta)
central_channels <- c('85','34','65','37','90','66','1','68','3','67','2','70','74','76','81','34','37','42','86','43','87','44','88','45','89','46','77','5','78','6','7','79','8','80','71','35','72','36','73')
# Filter rows with the specified channel names
table_power_central <- table_power_5%>%
filter(table_power_5$channel %in% central_channels)
#-------3. summarise mean -----------------
df_corr_frontal <- table_power_frontal%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,age,years_of_education,sex,hads_d_total_score, number_epochs, cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_beta_power = mean(rel_beta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
df_corr_central <- table_power_central%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,hads_d_total_score, number_epochs, cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_beta_power = mean(rel_beta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
#------- 4. demographics-----------------
# age
df_corr_frontal%>%
group_by(participant_id)%>%
ggplot(aes(age))+
geom_histogram(color = "black",
fill = "white", bins = sqrt(100))+
facet_wrap(~cluster_2,scales = 'free')+
theme_classic()
# years of education
df_corr_frontal%>%
group_by(participant_id)%>%
ggplot(aes(years_of_education))+
geom_histogram(color = "black",
fill = "white", bins = sqrt(100))+
facet_wrap(~cluster_2,scales = 'free')+
theme_classic()
t.test(years_of_education~cluster_2, data = df_corr_frontal, alternative = "two.sided")
df_corr_frontal%>%
group_by(cluster_2)%>%
count()
df_corr_frontal%>%
group_by(cluster_2,sex)%>%
count()
df_corr_frontal%>%
group_by(cluster_2)%>%
summarise(mean_age = mean(age),
sd_age = sd(age))
t.test(age~cluster_2, data = df_corr_frontal, alternative = "two.sided")
wilcox.test(age~cluster_2, data = df_corr_frontal,
exact = FALSE,
correct = FALSE,
conf.int = FALSE)# 0.69
table_behav <- df_corr_frontal%>%
group_by(cluster_2)%>%
summarise(mean_facit = mean(facit_f_FS, na.rm = T),
sd_facit = sd(facit_f_FS, na.rm = T),
mean_hads = mean(hads_d_total_score, na.rm = T),
sd_hads = sd(hads_d_total_score, na.rm = T),
mean_tmta = mean(tmt_a_time),
sd_tmta = sd(tmt_a_time),
mean_tmtb_a = mean(tmt_b_minus_a),
sd_tmtb_a = sd(tmt_b_minus_a),
mean_y_o = mean(years_of_education),
sd_y_o = sd(years_of_education),
mean_epoc = mean(number_epochs),
sd_epoc = sd(number_epochs))
df_corr_frontal%>%
group_by(cluster_2)%>%
ggplot(aes(facit_f_FS))+
geom_histogram(color = "black",
fill = "white", bins = sqrt(100))+
facet_wrap(~cluster_2,scales = 'free')+
theme_classic()# eine Gruppe ist schief!
leveneTest(facit_f_FS~cluster_2,data = df_corr_frontal)# nicht significant
# wilcox.test
wilcox.test(facit_f_FS~cluster_2, data = df_corr_frontal,
exact = FALSE,
correct = FALSE,
conf.int = FALSE)# 0.002
t.test(facit_f_FS~cluster_2, data = df_corr_frontal, alternative = "two.sided", paired = FALSE)# significant p = 0.001083
df_corr_frontal%>%
group_by(cluster_2)%>%
ggplot(aes(hads_d_total_score))+
geom_histogram(color = "black",
fill = "white", bins = sqrt(100))+
facet_wrap(~cluster_2,scales = 'free')+
theme_classic()# eine Gruppe ist schief
leveneTest(hads_d_total_score~cluster_2,data = df_corr_frontal)# not significant
t.test(hads_d_total_score~cluster_2, data = df_corr_frontal, alternative = "two.sided", paired = FALSE)# significant p = 0.001083
wilcox.test(hads_d_total_score~cluster_2, data = df_corr_frontal,
exact = FALSE,
correct = FALSE,
conf.int = FALSE)# without PCS hat eine schiefe Verteilung
df_corr_frontal%>%
group_by(cluster_2)%>%
ggplot(aes(tmt_a_time))+
geom_histogram(color = "black",
fill = "white", bins = sqrt(100))+
facet_wrap(~cluster_2,scales = 'free')+
theme_classic()# sieht okay aus
leveneTest(tmt_a_time~cluster_2,data = df_corr_frontal)# not significant
t.test(tmt_a_time~cluster_2, data = df_corr_frontal, alternative = "two.sided", paired = FALSE)# significant p = 0.001083
df_corr_frontal%>%
group_by(cluster_2)%>%
ggplot(aes(tmt_b_minus_a))+
geom_histogram(color = "black",
fill = "white", bins = sqrt(100))+
facet_wrap(~cluster_2,scales = 'free')+
theme_classic()# beide leicht schief (gleich)
leveneTest(tmt_b_minus_a~cluster_2,data = df_corr_frontal)# not significant
# number of epochs
df_corr_frontal%>%
group_by(cluster_2)%>%
summarise(mean_epoch = mean(number_epochs),
sd_age = sd(number_epochs))
t.test(number_epochs~cluster_2, data = df_corr_frontal, alternative = "two.sided", paired = FALSE)
cor.test(df_corr_frontal$mean_delta_power,df_corr_frontal$number_epochs)
df_corr_central%>%
ggplot(aes(x = number_epochs, y = mean_beta_power))+
geom_point()
cor.test(df_corr_central$mean_delta_power,df_corr_central$number_epochs)
# have a look at the whole data set (boxplots)
table_power_5%>%
group_by(cluster_2)%>%
ggplot(aes(x = group, y = rel_delta, color = group))+
geom_boxplot()
# per group
table_power_5%>%
group_by(cluster_2)%>%
ggplot(aes(x = group, y = rel_beta, color = group))+
geom_boxplot()
# just the frontal channels
table_power_frontal%>%
group_by(participant_id, cluster_2)%>%
ggplot(aes(x = participant_id, y = rel_delta, color = group))+
geom_boxplot()#+
# just per group
df_corr_frontal%>%
group_by(cluster_2)%>%
ggplot(aes(x = group, y = mean_delta_power, color = group))+
geom_boxplot()
# just per group (beta)
df_corr_central%>%
group_by(cluster_2)%>%
ggplot(aes(x = group, y = mean_beta_power, color = group))+
geom_boxplot()
# power values under 0 are clearly wrong -> have to be excluded
table_power_5 <- table_power_5%>%
filter(rel_delta > 0)
table_delta_filtered <-table_power_5%>%
group_by(participant_id) %>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
test_missing <- table_delta_filtered%>%
group_by(channel,cluster_2)%>%
count()
table_delta_filtered%>%
group_by(cluster_2)%>%
ggplot(aes(x = cluster_2, y = rel_delta))+
geom_boxplot()+
geom_jitter()
table_delta_frontal_filtered <- table_delta_filtered%>%
filter(table_delta_filtered$channel %in% frontal_channels)
test_missing <- table_delta_frontal_filtered%>%
group_by(channel,cluster_2)%>%
count()
df_corr_frontal_filtered <- table_delta_frontal_filtered%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,age,years_of_education,moca,cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_beta_power = mean(rel_beta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
df_corr_frontal_filtered%>%
group_by(cluster_2)%>%
ggplot(aes(x = cluster_2, y = mean_delta_power, color = cluster_2))+
geom_boxplot()+
geom_jitter()
# additional filtering (across group)
table_delta_filtered_cluster_2 <- table_delta_filtered%>%
group_by(cluster_2)%>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
table_frontal_filtered_cluster_2 <- table_delta_filtered_cluster_2%>%
filter(table_delta_filtered_cluster_2$channel %in% frontal_channels)
df_corr_frontal_filtered_cluster_2 <- table_frontal_filtered_cluster_2%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,age,moca,hads_d_total_score,cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_delta_power = mean(rel_delta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
df_corr_frontal_filtered_cluster_2%>%
group_by(cluster_2)%>%
ggplot(aes(x = cluster_2, y = mean_delta_power, color = cluster_2))+
geom_boxplot()+
geom_jitter()
df_corr_delta_filtered_cluster_2 <- table_delta_filtered_cluster_2%>%
group_by(participant_id,group,tmt_a_time,facit_f_FS, tmt_b_minus_a,age, cluster_2)%>%
summarise(mean_delta_power = mean(rel_delta),
mean_delta_power = mean(rel_delta),
mean_aperiodic_exponent = mean(aperiodic_exponent))
df_corr_delta_filtered_cluster_2%>%
group_by(cluster_2)%>%
ggplot(aes(x = cluster_2, y = mean_delta_power, color = cluster_2))+
geom_boxplot()+
geom_jitter()
t.test(mean_delta_power~cluster_2, data = df_corr_delta_filtered_cluster_2, alternative = 'two.sided')
View(number_of_epochs_5)
View(df_corr_central)
View(df_corr_delta_filtered_cluster_2)
library(tidyverse)
library(carData)
library(car)
library(readr)
library(ggdist)
library(ggExtra)# displaying distributions next to plots
library(ggsignif)# displaying stats in plots
library(ggplot2)
library(ggpubr)
table_power_5 <- read_csv("data/analysis_power/table_power_final_5.csv")
View(table_power_5)
