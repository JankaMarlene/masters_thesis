library(ggdist)
library(ggExtra)# displaying distributions next to plots
library(ggsignif)# displaying stats in plots
library(ggpubr)
library(coin)# need this for z value of wilcox test
library(effectsize)
library(effsize)# for cohens d
library(backports)
library(rstatix)# for wilcox test
library(dplyr)
library(cowplot)
theme_set(theme_cowplot())
# Load data
table_power_5 <- read_csv("data/analysis_power/table_power_final_5.csv")
number_of_epochs_5 <- read_csv("data/analysis_power/number_of_epochs_5.csv")
number_of_bad_channels <- read_csv("data/analysis_power/number_of_bad_channels.csv")
table_power_5 <- merge(table_power_5, number_of_epochs_5)
table_power_5 <- merge(table_power_5, number_of_bad_channels)
# Modify table (e.g. add TMT B-A and define combined group with 4-cluster solution)
table_power_5 <- table_power_5 %>%
mutate(
facit_f_FS = as.numeric(facit_f_FS),
tmt_diff = tmt_b_time - tmt_a_time,
PCS_group = ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"),
group_combined = paste(PCS_group, cluster_4, sep = "_")
)
# Filter out incomplete rows
table_power_5 <- table_power_5 %>%
filter(!is.na(cluster_4), !is.na(group))
# Define the channel names for delta (frontal ROI)
frontal_channels <- c('22','105','11','40','75','39','49','82','48','19','112','25','94','93','83','92','95','96','21','50','10','59','26')
# Filter rows with the specified channel names for frontal ROI
table_power_frontal <- table_power_5 %>%
filter(channel %in% frontal_channels)
# Define the channel names for beta (central ROI)
central_channels <- c('85','65','90','66','1','68','3','67','2','70','74','76','81','34','37','42','86','43','87','44','88','45','89','46','77','5','78','6','7','79','8','80','71','35','72','36','73')
# Filter rows with the specified channel names for central ROI
table_power_central <- table_power_5 %>%
filter(channel %in% central_channels)
# Frontal ROI: summarize delta power per participant
df_corr_frontal <- table_power_frontal %>%
group_by(participant_id, cluster_4, group, group_combined, age, sex, years_of_education,
facit_f_FS, hads_a_total_score, hads_d_total_score, psqi_total_score, moca,
pvt_reaction_time, nback_miss_1, nback_false_alarm_1, nback_miss_2, nback_false_alarm_2,
tmt_a_time, tmt_b_time, tmt_diff, number_epochs) %>%
summarise(mean_delta_power = mean(rel_delta, na.rm = TRUE),
mean_beta_power = mean(rel_beta, na.rm = TRUE),
mean_theta_power = mean(rel_theta, na.rm = TRUE),
mean_alpha_power = mean(rel_alpha, na.rm = TRUE),
mean_aperiodic_exponent = mean(aperiodic_exponent, na.rm = TRUE),
.groups = "drop")
# Central ROI: summarize beta power per participant
df_corr_central <- table_power_central %>%
group_by(participant_id, cluster_4, group, group_combined, age, sex, years_of_education,
facit_f_FS, hads_a_total_score, hads_d_total_score, psqi_total_score, moca,
pvt_reaction_time, nback_miss_1, nback_false_alarm_1, nback_miss_2, nback_false_alarm_2,
tmt_a_time, tmt_b_time, tmt_diff, number_epochs) %>%
summarise(mean_delta_power = mean(rel_delta, na.rm = TRUE),
mean_beta_power = mean(rel_beta, na.rm = TRUE),
mean_theta_power = mean(rel_theta, na.rm = TRUE),
mean_alpha_power = mean(rel_alpha, na.rm = TRUE),
mean_aperiodic_exponent = mean(aperiodic_exponent, na.rm = TRUE),
.groups = "drop")
# Levene's Test for delta power across 4 groups
leveneTest(mean_delta_power ~ group_combined, data = df_corr_frontal)
# Levene's Test for beta power across 4 groups
leveneTest(mean_beta_power ~ group_combined, data = df_corr_central)
# Group-wise subsets for plotting and stats
shapiro_groups <- df_corr_frontal %>%
group_by(group_combined)
# Check delta distribution per group
df_corr_frontal %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot() +
geom_jitter() +
theme_classic()
# Outlier removal within participant (±3 SD)
table_delta_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
# Remove negative delta values
table_delta_filtered <- table_delta_filtered %>%
mutate(rel_delta = ifelse(rel_delta < 0, 0, rel_delta))
# Filter to frontal channels only
table_delta_frontal_filtered <- table_delta_filtered %>%
filter(channel %in% frontal_channels)
# Summarize mean delta power (filtered), now using cluster_4
df_corr_frontal_filtered <- table_delta_frontal_filtered %>%
group_by(participant_id, group_combined, cluster_4, age, tmt_a_time, facit_f_FS, tmt_diff, moca) %>%
summarise(mean_delta_power = mean(rel_delta), .groups = "drop")
# Plot after within-participant filtering
df_corr_frontal_filtered %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(width = 0.3, height = 0, alpha = 0.5) +
theme_classic()
# Additional filtering across group_combined
table_delta_filtered_group <- table_delta_filtered %>%
group_by(group_combined) %>%
mutate(mean_rel_delta = mean(rel_delta),
sd_rel_delta = sd(rel_delta),
lower_bound = mean_rel_delta - 3 * sd_rel_delta,
upper_bound = mean_rel_delta + 3 * sd_rel_delta) %>%
filter(rel_delta >= lower_bound & rel_delta <= upper_bound) %>%
ungroup()
# Keep only frontal channels
table_frontal_filtered_group <- table_delta_filtered_group %>%
filter(channel %in% frontal_channels)
# Summarize again after across-group filtering
df_corr_frontal_filtered_group <- table_frontal_filtered_group %>%
group_by(participant_id, group_combined, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_delta_power = mean(rel_delta),
mean_aperiodic_exponent = mean(aperiodic_exponent),
.groups = "drop")
# Plot updated delta power after across-group filtering
df_corr_frontal_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(width = 0.3, alpha = 0.5) +
theme_classic()
# ---- Absolute Delta Power ----
table_delta_filtered_abs <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_abs_delta = mean(abs_delta),
sd_abs_delta = sd(abs_delta),
lower_bound = mean_abs_delta - 3 * sd_abs_delta,
upper_bound = mean_abs_delta + 3 * sd_abs_delta) %>%
filter(abs_delta >= lower_bound & abs_delta <= upper_bound) %>%
ungroup()
# Keep frontal channels
table_delta_frontal_filtered_abs <- table_delta_filtered_abs %>%
filter(channel %in% frontal_channels)
# Summarize absolute delta power per participant
df_corr_frontal_filtered_abs <- table_delta_frontal_filtered_abs %>%
group_by(participant_id, group_combined, cluster_4, tmt_a_time, facit_f_FS, tmt_diff, age, years_of_education) %>%
summarise(mean_delta_power_abs = mean(abs_delta), .groups = "drop")
# Plot absolute delta power
df_corr_frontal_filtered_abs %>%
ggplot(aes(x = group_combined, y = mean_delta_power_abs, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(width = 0.3, height = 0, alpha = 0.3) +
theme_classic()
# Kruskal-Wallis test across 4 groups
kruskal.test(mean_delta_power_abs ~ group_combined, data = df_corr_frontal_filtered_abs)
# Initial inspection
df_corr_central %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 1: Remove within-participant outliers (±3 SD)
table_beta_filtered <- table_power_5 %>%
group_by(participant_id) %>%
mutate(mean_rel_beta = mean(rel_beta, na.rm = TRUE),
sd_rel_beta = sd(rel_beta, na.rm = TRUE),
lower_bound = mean_rel_beta - 3 * sd_rel_beta,
upper_bound = mean_rel_beta + 3 * sd_rel_beta) %>%
filter(rel_beta >= lower_bound & rel_beta <= upper_bound) %>%
ungroup()
# Step 2: Keep only central channels
table_central_filtered <- table_beta_filtered %>%
filter(channel %in% central_channels)
# Step 3: Summarise beta power per participant
df_corr_central_filtered <- table_central_filtered %>%
group_by(participant_id, group, cluster_4,
group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4),
tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_beta_power = mean(rel_beta, na.rm = TRUE), .groups = "drop")
# Step 4: Plot after within-participant cleaning
df_corr_central_filtered %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 5: Additional outlier removal across group_combined
table_beta_filtered_group <- table_beta_filtered %>%
group_by(group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4)) %>%
mutate(mean_rel_beta = mean(rel_beta, na.rm = TRUE),
sd_rel_beta = sd(rel_beta, na.rm = TRUE),
lower_bound = mean_rel_beta - 3 * sd_rel_beta,
upper_bound = mean_rel_beta + 3 * sd_rel_beta) %>%
filter(rel_beta >= lower_bound & rel_beta <= upper_bound) %>%
ungroup()
# Step 6: Filter again to central ROI
table_central_filtered_group <- table_beta_filtered_group %>%
filter(channel %in% central_channels)
# Step 7: Final summarised dataset
df_corr_central_filtered_group <- table_central_filtered_group %>%
group_by(participant_id, group, cluster_4,
group_combined = paste0(ifelse(group == "withPCS", "self-reported CD", "no self-reported CD"), "_", cluster_4),
tmt_a_time, facit_f_FS, tmt_diff, age, moca, hads_d_total_score) %>%
summarise(mean_beta_power = mean(rel_beta, na.rm = TRUE), .groups = "drop")
# Step 8: Final plot
df_corr_central_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(outlier.colour = 'black') +
geom_jitter(alpha = 0.3, width = 0.2) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Relative Beta Power in Central ROI",
x = "Group",
y = "Mean Beta Power [μV²]")
# Define custom colors for the 4 clusters
color_palette <- c(
"no self-reported CD_c1" = "#FA8DB1",
"self-reported CD_c1" = "#C21C66",
"no self-reported CD_c2" = '#FDB57A',
"self-reported CD_c2" = '#D97700',
"no self-reported CD_c3" = "#D1A9EB",
"self-reported CD_c3" = "#8953B1",
"no self-reported CD_c4" = "#80D88A",
"self-reported CD_c4" = "#2E7D32"
)
# Make sure group_combined is a factor with correct levels
df_corr_ape$group_combined <- factor(df_corr_ape$group_combined, levels = names(color_palette))
##------ 8.3 Relative Delta Power (Frontal ROI) ---------------
# Run pairwise Wilcoxon test and filter out non-significant comparisons
pairwise_comparisons <- combn(unique(df_corr_frontal_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store results
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[1]],
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Only keep significant results (p-value < 0.05)
significant_comparisons <- pairwise_comparisons[which(pairwise_results < 0.05)]
p_values <- pairwise_results[which(pairwise_results < 0.05)]
# Create a data frame to store the significant comparisons and p-values
comparison_df <- data.frame(
Group1 = sapply(significant_comparisons, `[`, 1),
Group2 = sapply(significant_comparisons, `[`, 2),
p_value = p_values
)
# Determine y-positions for annotations to avoid overlap
# Here, you can adjust the y_positions to better fit your data
max_y <- max(df_corr_frontal_filtered_group$mean_delta_power)
y_positions <- seq(max_y * 0.8, max_y * 0.95, length.out = length(p_values))
# Make sure group_combined is a factor with correct levels
df_corr_frontal_filtered_group$group_combined <- factor(df_corr_frontal_filtered_group$group_combined, levels = names(color_palette))
# Plot
plot_rel_delta <- df_corr_frontal_filtered_group %>%
group_by(group_combined) %>%
ggplot(aes(x = group_combined, y = mean_delta_power, color = group_combined)) +
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2) +
labs(y = 'Mean Relative Delta Power [μV²] (Frontal ROI)', x = 'group and cluster') +
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(text = element_text(size = 14), axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
# Define pairwise comparisons for the Wilcoxon test
pairwise_comparisons <- combn(unique(df_corr_frontal_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store p-values
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[1]],
df_corr_frontal_filtered_group$mean_delta_power[df_corr_frontal_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Create a data frame with the comparisons and their p-values
comparison_df <- data.frame(
Group1 = sapply(pairwise_comparisons, `[`, 1),
Group2 = sapply(pairwise_comparisons, `[`, 2),
p_value = pairwise_results
)
# Display the table of comparisons and p-values
print(comparison_df)
# Pairwise Wilcoxon test
pairwise.wilcox.test(
df_corr_frontal_filtered_group$mean_delta_power,
df_corr_frontal_filtered_group$group_combined,
p.adjust.method = "bonferroni"
)
# Effect sizes
df_corr_frontal_filtered_group %>%
ungroup() %>%
wilcox_effsize(mean_delta_power ~ group_combined)
##----- 8.4 Relative Beta Power (Central ROI) -----------------
# Make sure group_combined is a factor with correct levels
df_corr_central_filtered_group$group_combined <- factor(df_corr_central_filtered_group$group_combined, levels = names(color_palette))
# Boxplot with Wilcoxon significance markers
plot_rel_beta <- df_corr_central_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2) +
labs(y = 'Mean Relative Beta Power [μV²] (Central ROI)', x = 'group and cluster') +
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(
text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Save the plot
ggsave(filename = file.path(output_folder, "rel_beta_boxplot.png"),
plot = plot_rel_beta,
width = 10,
height = 7)
# Define pairwise comparisons for the Wilcoxon test
pairwise_comparisons <- combn(unique(df_corr_central_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store p-values
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_central_filtered_group$mean_beta_power[df_corr_central_filtered_group$group_combined == groups[1]],
df_corr_central_filtered_group$mean_beta_power[df_corr_central_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Create a data frame with the comparisons and their p-values
comparison_df <- data.frame(
Group1 = sapply(pairwise_comparisons, `[`, 1),
Group2 = sapply(pairwise_comparisons, `[`, 2),
p_value = pairwise_results
)
# Display the table of comparisons and p-values
print(comparison_df)
# Pairwise Wilcoxon tests (Bonferroni-adjusted)
pairwise.wilcox.test(
df_corr_central_filtered_group$mean_beta_power,
df_corr_central_filtered_group$group_combined,
p.adjust.method = "bonferroni"
)
# Effect sizes (Wilcoxon rank-based)
df_corr_central_filtered_group %>%
ungroup() %>%
wilcox_effsize(mean_beta_power ~ group_combined)
kruskal.test(mean_delta_power_abs ~ group_combined, data = df_corr_frontal_filtered_abs)
kruskal.test(mean_delta_power_mean ~ group_combined, data = df_corr_frontal_filtered_mean)
##----- 8.4 Relative Beta Power (Central ROI) -----------------
# Make sure group_combined is a factor with correct levels
df_corr_central_filtered_group$group_combined <- factor(df_corr_central_filtered_group$group_combined, levels = names(color_palette))
# Boxplot with Wilcoxon significance markers
plot_rel_beta <- df_corr_central_filtered_group %>%
ggplot(aes(x = group_combined, y = mean_beta_power, color = group_combined)) +
geom_boxplot(size = 0.75, outlier.colour = NA, width = 0.5) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6, size = 2) +
labs(y = 'Mean Relative Beta Power [μV²] (Central ROI)', x = 'group and cluster') +
scale_color_manual(values = color_palette) +
theme_classic() +
guides(color = FALSE) +
theme(
text = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1)
)
kruskal.test(mean_delta_power_group ~ group_combined, data = df_corr_frontal_filtered_group)
# Save the plot
ggsave(filename = file.path(output_folder, "rel_beta_boxplot.png"),
plot = plot_rel_beta,
width = 10,
height = 7)
# Define pairwise comparisons for the Wilcoxon test
pairwise_comparisons <- combn(unique(df_corr_central_filtered_group$group_combined), 2, simplify = FALSE)
# Perform Wilcoxon tests and store p-values
pairwise_results <- sapply(pairwise_comparisons, function(groups) {
test_result <- wilcox.test(
df_corr_central_filtered_group$mean_beta_power[df_corr_central_filtered_group$group_combined == groups[1]],
df_corr_central_filtered_group$mean_beta_power[df_corr_central_filtered_group$group_combined == groups[2]],
exact = FALSE
)
test_result$p.value
})
# Create a data frame with the comparisons and their p-values
comparison_df <- data.frame(
Group1 = sapply(pairwise_comparisons, `[`, 1),
Group2 = sapply(pairwise_comparisons, `[`, 2),
p_value = pairwise_results
)
kruskal.test(df_corr_frontal_filtered_group ~ group_combined, data = df_corr_frontal_filtered_group)
# Delta power (frontal)
df_corr_frontal_filtered_group %>%
group_by(group_combined) %>%
summarise(
mean_delta = mean(mean_delta_power, na.rm = TRUE),
sd_delta = sd(mean_delta_power, na.rm = TRUE),
.groups = "drop" # Ensure grouping is dropped after summarising
)
# Beta power (central)
df_corr_central_filtered_group %>%
group_by(group_combined) %>%
summarise(
mean_beta = mean(mean_beta_power, na.rm = TRUE),
sd_beta = sd(mean_beta_power, na.rm = TRUE),
.groups = "drop" # Ensure grouping is dropped after summarising
)
#------------ 1. load packages------------------
library(tidyverse)
library(car)
library(readr)
library(ggdist)
library(ggExtra)# displaying distributions next to plots
library(ggsignif)# displaying stats in plots
library(ggpubr)
library(coin)# need this for z value of wilcox test
library(effectsize)
library(effsize)# for cohens d
library(backports)
library(rstatix)# for wilcox test
library(dplyr)
library(cowplot)
theme_set(theme_cowplot())
#--------------- 2. load data--------------------
# load csv file that I created in MATLAB (has ID, channel, aperiodic offset, aperiodic exponent, abs and rel delta and beta power)
table_power_5 <- read_csv("data/analysis_power/table_power_final_5.csv") # this is the 5s data set with a 0.1 high pass filtering
number_of_epochs_5 <- read_csv("data/analysis_power/number_of_epochs_5.csv")# and load the number of 'good' epochs
number_of_bad_channels <- read_csv("data/analysis_power/number_of_bad_channels.csv")
table_power_5 <- merge(table_power_5, number_of_epochs_5)# put them together
# Hierarchical clustering
library(tidyverse)
library(dplyr)
library(dendextend)
library(ggplot2)
library(gridExtra)
library(purrr)
library(car)
library(readr)
library(ggdist)
library(ggExtra)# displaying distributions next to plots
library(ggsignif)# displaying stats in plots
library(ggpubr)
library(coin)# need this for z value of wilcox test
library(effectsize)
library(effsize)# for cohens d
library(backports)
library(rstatix)# for wilcox test
library(FSA)
library(vroom)
library(cowplot)
theme_set(theme_cowplot())
load("clean_data.RData")
# Extract relevant columns from clean_data
cog_df <- clean_data[, c("group","z_pvt_reaction_time_w","z_tmt_a_time_w","z_tmt_b_time_w")]
clean_data$group[clean_data$group == "withPCS"] <- "self-reported CD"
clean_data$group[clean_data$group == "withoutPCS"] <- "no self-reported CD"
# Check structure and summarize contents of cog_df
str(cog_df)
summary(cog_df)
# Store group labels in a separate variable and exclude label (group column) from the dataset to do clustering
# Later true labels will be used to check how good clustering turned out
cog_label <- cog_df$group
cog_label[cog_label == "withPCS"] <- "self-reported CD"
cog_label[cog_label == "withoutPCS"] <- "no self-reported CD"
cog_df$group <- NULL
str(cog_df)
# Build distance matrix
# Since all values are continuous numerical values I use euclidean distance method
dist_mat <- dist(cog_df, method = 'euclidean')
# Now decide which linkage method to use
# Try different kinds of linkage methods after decide which performed better
# Build dendrogram by plotting hierarchical cluster object with hclust
# Specify linkage method via 'method' argument
hclust_ward <- hclust(dist_mat, method = 'ward')
plot(hclust_ward)
# Create the desired number of clusters
# Since I want two groups 'withPCS' and 'withoutPCS' number of clusters = 2
cut_ward <- cutree(hclust_ward, k = 2)
# To visualize clusters on dendrogram use abline function to draw the cut line
plot(hclust_ward)
rect.hclust(hclust_ward, k = 2, border = 2:30)
abline(h = 28, col = 'red')
# Visualize tree with different colored branches
ward_dend_obj <- as.dendrogram(hclust_ward)
# Cut into 2 clusters
dend_cut <- cutree(hclust_ward, k = 2)
# Assign cluster labels to dendrogram
ward_col_dend <- color_branches(ward_dend_obj, k = 2)
# Get cluster order to assign colors properly
labels_ordered <- labels(ward_col_dend)
cluster_ordered <- dend_cut[labels_ordered]
# Create a vector of colors corresponding to cluster
custom_colors <- ifelse(cluster_ordered == 1, "#F59541", "#02CAF5")
# Apply custom colors to branches
ward_col_dend <- color_branches(ward_dend_obj, k = 2,
col = c("#F59541", "#02CAF5"))
plot(ward_col_dend,
ylab = "Height",
ylim = c(0, 40 + 2))
# Append cluster results obtained back in the original dataframe
# Use mutate
# Count how many observations were assigned to each cluster with the count function
cog_df_cl <- mutate(cog_df, cluster = cut_ward)
count(cog_df_cl,cluster)
# Cross-checking clustering results using table function
table(cog_df_cl$cluster,cog_label)
# Add the cluster information from cog_df_cl to clean_data
clean_data$cluster <- cog_df_cl$cluster
# Check the updated structure of clean_data
str(clean_data)
# Checking sex in cluster
table(cog_df_cl$cluster,clean_data$sex)
View(clean_data)
View(cog_df)
View(cog_df_cl)
# Filter the data for Cluster 2
cluster_2_data <- subset(clean_data, cluster == 2)
print(sex ~ cluster_2_data)
table(cog_df_cl$cluster, clean_data$group, clean_data$sex)
