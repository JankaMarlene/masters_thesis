test_results_withoutPCS
# Function to perform t-test for a single variable within each cluster
perform_t_test <- function(variable_name) {
# Filter data for Cluster 1
cluster_1_data <- subset(clean_data, cog_df_cl$cluster == 1)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 1
t_test_cluster_1 <- t.test(cluster_1_data[[variable_name]] ~ cluster_1_data$group)
# Filter data for Cluster 2
cluster_2_data <- subset(clean_data, cog_df_cl$cluster == 2)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 2
t_test_cluster_2 <- t.test(cluster_2_data[[variable_name]] ~ cluster_2_data$group)
# Return t-test results as a list
list(cluster_1 = t_test_cluster_1, cluster_2 = t_test_cluster_2)
}
# Map function over each variable to perform t-test
stats_t_test <- map(variables, perform_t_test)
# Display t-test results for each variable within each cluster
# Print results with variable names
for (i in seq_along(variables)) {
cat("Variable:", variables[i], "\n")
cat("Cluster 1:\n")
cat("Mean in group withoutPCS:", round(stats_t_test[[i]]$cluster_1$estimate[1], 2), "\n")
cat("Mean in group withPCS:", round(stats_t_test[[i]]$cluster_1$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_1$p.value, 4), "\n\n")
cat("Cluster 2:\n")
cat("Mean in group withoutPCS:", round(stats_t_test[[i]]$cluster_2$estimate[1], 2), "\n")
cat("Mean in group withPCS:", round(stats_t_test[[i]]$cluster_2$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_2$p.value, 4), "\n\n")
}
#--------
# Cognitive variables winsorized Data
# Vector of variables for which to create boxplots
variables <- c("pvt_reaction_time_w", "nback_miss_1_w", "nback_miss_2_w", "tmt_a_time_w", "tmt_b_time_w","tmt_diff_w")
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each variable
for (variable in variables) {
# Create boxplot for the current variable grouped by cluster
plot <- ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = !!sym(variable))) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
# Append the plot to the list
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize an empty list to store the test results
test_results <- list()
# Loop over each variable
for (variable in variables) {
# Perform Wilcoxon rank sum test for the current variable
test_result <- t.test(clean_data[[variable]] ~ as.factor(cog_df_cl$cluster), exact = FALSE)
# Calculate descriptive statistics
descriptive_stats <- clean_data %>%
group_by(cog_df_cl$cluster) %>%
summarise(
mean = round(mean(!!sym(variable), na.rm = TRUE), 2),
sd = round(sd(!!sym(variable), na.rm = TRUE), 2)
) %>%
mutate(
mean = format(mean, nsmall = 2),
sd = format(sd, nsmall = 2)
)
# Combine test results and descriptive statistics
test_results[[variable]] <- list(
test = test_result,
descriptives = descriptive_stats
)
}
# Display the test results
test_results
# Install and load the effsize package if not already installed
if (!requireNamespace("effsize", quietly = TRUE)) {
install.packages("effsize")
}
library(effsize)
# Initialize an empty list to store the effect sizes
effect_sizes <- list()
# Loop over each variable to calculate effect sizes
for (variable in variables) {
# Calculate Cohen's d for the current variable
cohens_d <- cohen.d(clean_data[[variable]], as.factor(cog_df_cl$cluster))
# Store the effect size in the list
effect_sizes[[variable]] <- cohens_d$estimate
}
# Display the effect sizes
effect_sizes
# Vector of variables for which to create boxplots
variables <- c("pvt_reaction_time_w", "nback_miss_1_w", "nback_miss_2_w", "tmt_a_time_w", "tmt_b_time_w","tmt_diff_w")
# Function to calculate mean and sd for a single variable
calculate_stats <- function(variable_name) {
clean_data %>%
group_by(cluster = as.factor(cog_df_cl$cluster), group) %>%
summarise(
mean = round(mean(!!sym(variable_name), na.rm = TRUE), 4),
sd = round(sd(!!sym(variable_name), na.rm = TRUE), 4)
) %>%
mutate(variable = variable_name)  # Add variable name as a column
}
# Map function over each variable to calculate mean and sd
stats_list <- map(variables, calculate_stats)
# Extract and name each table by variable
named_stats_tables <- map(setNames(stats_list, variables), bind_rows)
# Display each table
named_stats_tables
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each variable
for (variable in variables) {
# Create boxplot for the current variable grouped by cluster and fill by group
plot <- ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = !!sym(variable), fill = group)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
# Append the plot to the list
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize an empty list to store the test results for withPCS group
test_results_withPCS <- list()
# Initialize an empty list to store the test results for withoutPCS group
test_results_withoutPCS <- list()
# Loop over each variable
for (variable in variables) {
# Perform t-test for the current variable within "withPCS" group
t_test_result_withPCS <- t.test(clean_data[[variable]][clean_data$group == "self-reported CD" & cog_df_cl$cluster == 1],
clean_data[[variable]][clean_data$group == "self-reported CD" & cog_df_cl$cluster == 2])
# Perform t-test for the current variable within "withoutPCS" group
t_test_result_withoutPCS <- t.test(clean_data[[variable]][clean_data$group == "no self-reported CD" & cog_df_cl$cluster == 1],
clean_data[[variable]][clean_data$group == "no self-reported CD" & cog_df_cl$cluster == 2])
# Store the test results for withPCS group in the list
test_results_withPCS[[variable]] <- t_test_result_withPCS
# Store the test results for withoutPCS group in the list
test_results_withoutPCS[[variable]] <- t_test_result_withoutPCS
}
# Display the test results for withPCS group
test_results_withPCS
# Display the test results for withoutPCS group
test_results_withoutPCS
# Function to perform t-test for a single variable within each cluster
perform_t_test <- function(variable_name) {
# Filter data for Cluster 1
cluster_1_data <- subset(clean_data, cog_df_cl$cluster == 1)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 1
t_test_cluster_1 <- t.test(cluster_1_data[[variable_name]] ~ cluster_1_data$group)
# Filter data for Cluster 2
cluster_2_data <- subset(clean_data, cog_df_cl$cluster == 2)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 2
t_test_cluster_2 <- t.test(cluster_2_data[[variable_name]] ~ cluster_2_data$group)
# Return t-test results as a list
list(cluster_1 = t_test_cluster_1, cluster_2 = t_test_cluster_2)
}
# Map function over each variable to perform t-test
stats_t_test <- map(variables, perform_t_test)
# Display t-test results for each variable within each cluster
# Print results with variable names
for (i in seq_along(variables)) {
cat("Variable:", variables[i], "\n")
cat("Cluster 1:\n")
cat("Mean in group no self-reported CD:", round(stats_t_test[[i]]$cluster_1$estimate[1], 2), "\n")
cat("Mean in group self-reported CD:", round(stats_t_test[[i]]$cluster_1$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_1$p.value, 4), "\n\n")
cat("Cluster 2:\n")
cat("Mean in group no self-reported CD:", round(stats_t_test[[i]]$cluster_2$estimate[1], 2), "\n")
cat("Mean in group self-reported CD:", round(stats_t_test[[i]]$cluster_2$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_2$p.value, 4), "\n\n")
}
#--------
# Cognitive variables standardized data
# Vector of variables for which to create boxplots
variables <- c("z_pvt_reaction_time_w", "s_nback_miss_1_w", "s_nback_miss_2_w", "z_tmt_a_time_w", "z_tmt_b_time_w","z_tmt_diff_w")
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each variable
for (variable in variables) {
# Create boxplot for the current variable grouped by cluster
plot <- ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = !!sym(variable))) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
# Append the plot to the list
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize an empty list to store the test results
test_results <- list()
# Loop over each variable
for (variable in variables) {
# Perform Wilcoxon rank sum test for the current variable
test_result <- t.test(clean_data[[variable]] ~ as.factor(cog_df_cl$cluster), exact = FALSE)
# Calculate descriptive statistics
descriptive_stats <- clean_data %>%
group_by(cog_df_cl$cluster) %>%
summarise(
mean = round(mean(!!sym(variable), na.rm = TRUE), 2),
sd = round(sd(!!sym(variable), na.rm = TRUE), 2)
) %>%
mutate(
mean = format(mean, nsmall = 2),
sd = format(sd, nsmall = 2)
)
# Combine test results and descriptive statistics
test_results[[variable]] <- list(
test = test_result,
descriptives = descriptive_stats
)
}
# Display the test results
test_results
# Install and load the effsize package if not already installed
if (!requireNamespace("effsize", quietly = TRUE)) {
install.packages("effsize")
}
library(effsize)
# Initialize an empty list to store the effect sizes
effect_sizes <- list()
# Loop over each variable to calculate effect sizes
for (variable in variables) {
# Calculate Cohen's d for the current variable
cohens_d <- cohen.d(clean_data[[variable]], as.factor(cog_df_cl$cluster))
# Store the effect size in the list
effect_sizes[[variable]] <- cohens_d$estimate
}
# Display the effect sizes
effect_sizes
# Vector of variables for which to create boxplots
variables <- c("z_pvt_reaction_time_w", "s_nback_miss_1_w", "s_nback_miss_2_w", "z_tmt_a_time_w", "z_tmt_b_time_w","z_tmt_diff_w")
# Function to calculate mean and sd for a single variable
calculate_stats <- function(variable_name) {
clean_data %>%
group_by(cluster = as.factor(cog_df_cl$cluster), group) %>%
summarise(
mean = round(mean(!!sym(variable_name), na.rm = TRUE), 4),
sd = round(sd(!!sym(variable_name), na.rm = TRUE), 4)
) %>%
mutate(variable = variable_name)  # Add variable name as a column
}
# Map function over each variable to calculate mean and sd
stats_list <- map(variables, calculate_stats)
# Extract and name each table by variable
named_stats_tables <- map(setNames(stats_list, variables), bind_rows)
# Display each table
named_stats_tables
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each variable
for (variable in variables) {
# Create boxplot for the current variable grouped by cluster and fill by group
plot <- ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = !!sym(variable), fill = group)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
# Append the plot to the list
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize an empty list to store the test results for withPCS group
test_results_withPCS <- list()
# Initialize an empty list to store the test results for withoutPCS group
test_results_withoutPCS <- list()
# Loop over each variable
for (variable in variables) {
# Perform t-test for the current variable within "withPCS" group
t_test_result_withPCS <- t.test(clean_data[[variable]][clean_data$group == "self-reported CD" & cog_df_cl$cluster == 1],
clean_data[[variable]][clean_data$group == "self-reported CD" & cog_df_cl$cluster == 2])
# Perform t-test for the current variable within "withoutPCS" group
t_test_result_withoutPCS <- t.test(clean_data[[variable]][clean_data$group == "no self-reported CD" & cog_df_cl$cluster == 1],
clean_data[[variable]][clean_data$group == "no self-reported CD" & cog_df_cl$cluster == 2])
# Store the test results for withPCS group in the list
test_results_withPCS[[variable]] <- t_test_result_withPCS
# Store the test results for withoutPCS group in the list
test_results_withoutPCS[[variable]] <- t_test_result_withoutPCS
}
# Display the test results for withPCS group
test_results_withPCS
# Display the test results for withoutPCS group
test_results_withoutPCS
# Function to perform t-test for a single variable within each cluster
perform_t_test <- function(variable_name) {
# Filter data for Cluster 1
cluster_1_data <- subset(clean_data, cog_df_cl$cluster == 1)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 1
t_test_cluster_1 <- t.test(cluster_1_data[[variable_name]] ~ cluster_1_data$group)
# Filter data for Cluster 2
cluster_2_data <- subset(clean_data, cog_df_cl$cluster == 2)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 2
t_test_cluster_2 <- t.test(cluster_2_data[[variable_name]] ~ cluster_2_data$group)
# Return t-test results as a list
list(cluster_1 = t_test_cluster_1, cluster_2 = t_test_cluster_2)
}
# Map function over each variable to perform t-test
stats_t_test <- map(variables, perform_t_test)
# Display t-test results for each variable within each cluster
# Print results with variable names
for (i in seq_along(variables)) {
cat("Variable:", variables[i], "\n")
cat("Cluster 1:\n")
cat("Mean in group no self-reported CD:", round(stats_t_test[[i]]$cluster_1$estimate[1], 2), "\n")
cat("Mean in group self-reported CD:", round(stats_t_test[[i]]$cluster_1$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_1$p.value, 4), "\n\n")
cat("Cluster 2:\n")
cat("Mean in group no self-reported CD:", round(stats_t_test[[i]]$cluster_2$estimate[1], 2), "\n")
cat("Mean in group self-reported CD:", round(stats_t_test[[i]]$cluster_2$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_2$p.value, 4), "\n\n")
}
#--------
## Questionairs
# Vector of variables for which to create boxplots
new_variables <- c("facit_f_FS", "hads_a_total_score", "hads_d_total_score", "psqi_total_score")
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each new variable
for (variable in new_variables) {
# Create boxplot for the current variable grouped by cluster
plot <- ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = !!sym(variable))) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
# Append the plot to the list
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize an empty list to store the test results (Signifikanztest)
test_results <- list()
# Loop over each variable
for (variable in new_variables) {
# Perform Wilcoxon rank sum test for the current variable
test_result <- t.test(clean_data[[variable]] ~ as.factor(cog_df_cl$cluster), exact = FALSE)
# Calculate descriptive statistics
descriptive_stats <- clean_data %>%
group_by(cog_df_cl$cluster) %>%
summarise(
mean = round(mean(!!sym(variable), na.rm = TRUE), 2),
sd = round(sd(!!sym(variable), na.rm = TRUE), 2)
) %>%
mutate(
mean = format(mean, nsmall = 2),
sd = format(sd, nsmall = 2)
)
# Combine test results and descriptive statistics
test_results[[variable]] <- list(
test = test_result,
descriptives = descriptive_stats
)
}
# Display the test results
test_results
# Vector of variables for which to create boxplots
new_variables <- c("facit_f_FS", "hads_a_total_score", "hads_d_total_score", "psqi_total_score")
# Function to calculate mean and sd for a single variable
calculate_stats <- function(variable_name) {
clean_data %>%
group_by(cluster = as.factor(cog_df_cl$cluster), group) %>%
summarise(
mean = round(mean(!!sym(variable_name), na.rm = TRUE), 4),
sd = round(sd(!!sym(variable_name), na.rm = TRUE), 4)
) %>%
mutate(variable = variable_name)  # Add variable name as a column
}
# Map function over each variable to calculate mean and sd
stats_list <- map(new_variables, calculate_stats)
# Extract and name each table by variable
named_stats_tables <- map(setNames(stats_list, new_variables), bind_rows)
# Display each table
named_stats_tables
# Initialize an empty list to store the plots
plot_list <- list()
# Loop over each variable
for (variable in new_variables) {
# Create boxplot for the current variable grouped by cluster and fill by group
plot <- ggplot(clean_data, aes(x = as.factor(cog_df_cl$cluster), y = !!sym(variable), fill = group)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
labs(x = "Cluster", y = variable, title = paste("Distribution of", variable, "by Cluster"))
# Append the plot to the list
plot_list[[variable]] <- plot
}
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Initialize an empty list to store the test results for withPCS group
test_results_withPCS <- list()
# Initialize an empty list to store the test results for withoutPCS group
test_results_withoutPCS <- list()
# Loop over each variable
for (variable in new_variables) {
# Perform t-test for the current variable within "withPCS" group
t_test_result_withPCS <- t.test(clean_data[[variable]][clean_data$group == "self-reported CD" & cog_df_cl$cluster == 1],
clean_data[[variable]][clean_data$group == "self-reported CD" & cog_df_cl$cluster == 2])
# Perform t-test for the current variable within "withoutPCS" group
t_test_result_withoutPCS <- t.test(clean_data[[variable]][clean_data$group == "no self-reported CD" & cog_df_cl$cluster == 1],
clean_data[[variable]][clean_data$group == "no self-reported CD" & cog_df_cl$cluster == 2])
# Store the test results for withPCS group in the list
test_results_withPCS[[variable]] <- t_test_result_withPCS
# Store the test results for withoutPCS group in the list
test_results_withoutPCS[[variable]] <- t_test_result_withoutPCS
}
# Display the test results for withPCS group
test_results_withPCS
# Display the test results for withoutPCS group
test_results_withoutPCS
# Function to perform t-test for a single variable within each cluster
perform_t_test <- function(new_variable_name) {
# Filter data for Cluster 1
cluster_1_data <- subset(clean_data, cog_df_cl$cluster == 1)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 1
t_test_cluster_1 <- t.test(cluster_1_data[[new_variable_name]] ~ cluster_1_data$group)
# Filter data for Cluster 2
cluster_2_data <- subset(clean_data, cog_df_cl$cluster == 2)
# Perform t-test for the variable between "withPCS" and "withoutPCS" groups within Cluster 2
t_test_cluster_2 <- t.test(cluster_2_data[[new_variable_name]] ~ cluster_2_data$group)
# Return t-test results as a list
list(cluster_1 = t_test_cluster_1, cluster_2 = t_test_cluster_2)
}
# Map function over each variable to perform t-test
stats_t_test <- map(new_variables, perform_t_test)
# Display t-test results for each variable within each cluster
# Print results with variable names
for (i in seq_along(new_variables)) {
cat("Variable:", new_variables[i], "\n")
cat("Cluster 1:\n")
cat("Mean in group no self-reported CD:", round(stats_t_test[[i]]$cluster_1$estimate[1], 2), "\n")
cat("Mean in group self-reported CD:", round(stats_t_test[[i]]$cluster_1$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_1$p.value, 4), "\n\n")
cat("Cluster 2:\n")
cat("Mean in group no self-reported CD:", round(stats_t_test[[i]]$cluster_2$estimate[1], 2), "\n")
cat("Mean in group self-reported CD:", round(stats_t_test[[i]]$cluster_2$estimate[2], 2), "\n")
cat("p-value:", round(stats_t_test[[i]]$cluster_2$p.value, 4), "\n\n")
}
View(cohens_d)
# Hierarchical clustering
library(tidyverse)
library(dplyr)
library(dendextend)
library(ggplot2)
library(gridExtra)
library(purrr)
library(vroom)
load("clean_data.RData")
# Extract relevant columns from clean_data
cog_df <- clean_data[, c("group","z_pvt_reaction_time_w","z_tmt_a_time_w","z_tmt_b_time_w")]
clean_data$group[clean_data$group == "withPCS"] <- "self-reported CD"
clean_data$group[clean_data$group == "withoutPCS"] <- "no self-reported CD"
# Check structure and summarize contents of cog_df
str(cog_df)
summary(cog_df)
# Store group labels in a separate variable and exclude label (group column) from the dataset to do clustering
# Later true labels will be used to check how good clustering turned out
cog_label <- cog_df$group
cog_label[cog_label == "withPCS"] <- "self-reported CD"
cog_label[cog_label == "withoutPCS"] <- "no self-reported CD"
cog_df$group <- NULL
str(cog_df)
# Build distance matrix
# Since all values are continuous numerical values I use euclidean distance method
dist_mat <- dist(cog_df, method = 'euclidean')
# Now decide which linkage method to use
# Try different kinds of linkage methods after decide which performed better
# Build dendrogram by plotting hierarchical cluster object with hclust
# Specify linkage method via 'method' argument
hclust_ward <- hclust(dist_mat, method = 'ward')
plot(hclust_ward)
# Create the desired number of clusters
# Since I want two groups 'withPCS' and 'withoutPCS' number of clusters = 2
cut_ward <- cutree(hclust_ward, k = 2)
# To visualize clusters on dendrogram use abline function to draw the cut line
plot(hclust_ward)
rect.hclust(hclust_ward, k = 2, border = 2:30)
abline(h = 28, col = 'red')
# Visualize tree with different colored branches
ward_dend_obj <- as.dendrogram(hclust_ward)
ward_col_dend <- color_branches(ward_dend_obj, h = 28)
plot(ward_col_dend)
# Visualize the clusters see YT Video Hierarchical Clustering in R Spencer Pao
# install.packages("factoextra")
# library(factoextra)
# cluster_obj <- list(data = cog_df_sc, cluster = cut_avg)
# fviz_cluster(cluster_obj)
# rownames(cog_df_sc) <- paste(cog_label, 1:dim(cog_df) [1], sep = "_")
# fviz_cluster(list(data=cog_df_sc))
# Append cluster results obtained back in the original dataframe
# Use mutate
# Count how many observations were assigned to each cluster with the count function
cog_df_cl <- mutate(cog_df, cluster = cut_ward)
count(cog_df_cl,cluster)
# Cross-checking clustering results using table function
table(cog_df_cl$cluster,cog_label)
# Add the cluster information from cog_df_cl to clean_data
clean_data$cluster <- cog_df_cl$cluster
# Check the updated structure of clean_data
str(clean_data)
# Checking sex in cluster
table(cog_df_cl$cluster,clean_data$sex)
cluster_info <- clean_data %>%
select(participant_id, cluster)
# Load the participants.tsv file
participants <- read.delim("C:/Users/jankj/OneDrive/Desktop/masters_thesis/data/participants.tsv", na.strings = "n/a", header = TRUE)
# Check the structure of participants to identify a common identifier
str(participants)
# Merge the clean_data with participants based on a common identifier
merged_data <- participants %>%
left_join(cluster_info, by = "participant_id")
merged_data <- merged_data %>%
rename(cluster_2 = cluster)
# Convert cluster_4 to character if necessary
merged_data <- merged_data %>%
mutate(cluster_2 = as.character(cluster_2))
# Use dplyr::recode explicitly
merged_data <- merged_data %>%
mutate(cluster_2 = dplyr::recode(cluster_2, `1` = 'c1', `2` = 'c2'))
# Check the structure of the merged data to ensure everything is correct
str(merged_data)
# Optionally, save the merged data to a new file
write_tsv(merged_data, "C:/Users/jankj/OneDrive/Desktop/masters_thesis/data/merged_data.tsv")
